<Type Name="Range" FullName="Microsoft.Office.Interop.Excel.Range">
  <Metadata><Meta Name="ms.openlocfilehash" Value="970c62ca3e06a81e143d3b1337bd0b64ff32de6cab8e45021521933e8d6aaf7b" /><Meta Name="ms.sourcegitcommit" Value="daf501296516d104cf396246ac0d336adfeffd0d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/06/2021" /><Meta Name="ms.locfileid" Value="54518193" /></Metadata><TypeSignature Language="C#" Value="public interface Range : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract Range implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.Range" />
  <TypeSignature Language="VB.NET" Value="Public Interface Range&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class Range : System::Collections::IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00020846-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>代表某一单元格、某一行、某一列、某一选定区域（该区域可包含一个或若干连续单元格区域），或者某一三维区域。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="_Default">
      <MemberSignature Language="C#" Value="public object this[object RowIndex, object ColumnIndex] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object _Default(object, object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range._Default(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property _Default(Optional RowIndex As Object, Optional ColumnIndex As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^, System::Object ^] { System::Object ^ get(System::Object ^ RowIndex, System::Object ^ ColumnIndex); void set(System::Object ^ RowIndex, System::Object ^ ColumnIndex, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowIndex" Type="System.Object" />
        <Parameter Name="ColumnIndex" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowIndex">To be added.</param>
        <param name="ColumnIndex">To be added.</param>
        <summary>保留以供内部使用。 </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="_PasteSpecial">
      <MemberSignature Language="C#" Value="public object _PasteSpecial (Microsoft.Office.Interop.Excel.XlPasteType Paste = Microsoft.Office.Interop.Excel.XlPasteType.xlPasteAll, Microsoft.Office.Interop.Excel.XlPasteSpecialOperation Operation = Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationNone, object SkipBlanks, object Transpose);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object _PasteSpecial([in]valuetype Microsoft.Office.Interop.Excel.XlPasteType Paste, [in]valuetype Microsoft.Office.Interop.Excel.XlPasteSpecialOperation Operation, [in]object SkipBlanks, [in]object Transpose) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range._PasteSpecial(Microsoft.Office.Interop.Excel.XlPasteType,Microsoft.Office.Interop.Excel.XlPasteSpecialOperation,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function _PasteSpecial (Optional Paste As XlPasteType = Microsoft.Office.Interop.Excel.XlPasteType.xlPasteAll, Optional Operation As XlPasteSpecialOperation = Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationNone, Optional SkipBlanks As Object, Optional Transpose As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1027)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Paste" Type="Microsoft.Office.Interop.Excel.XlPasteType" />
        <Parameter Name="Operation" Type="Microsoft.Office.Interop.Excel.XlPasteSpecialOperation" />
        <Parameter Name="SkipBlanks" Type="System.Object" />
        <Parameter Name="Transpose" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Paste">To be added.</param>
        <param name="Operation">To be added.</param>
        <param name="SkipBlanks">To be added.</param>
        <param name="Transpose">To be added.</param>
        <summary>保留以供内部使用。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="_PrintOut">
      <MemberSignature Language="C#" Value="public object _PrintOut (object From, object To, object Copies, object Preview, object ActivePrinter, object PrintToFile, object Collate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object _PrintOut([in]object From, [in]object To, [in]object Copies, [in]object Preview, [in]object ActivePrinter, [in]object PrintToFile, [in]object Collate) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range._PrintOut(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function _PrintOut (Optional From As Object, Optional To As Object, Optional Copies As Object, Optional Preview As Object, Optional ActivePrinter As Object, Optional PrintToFile As Object, Optional Collate As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(905)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="From" Type="System.Object" />
        <Parameter Name="To" Type="System.Object" />
        <Parameter Name="Copies" Type="System.Object" />
        <Parameter Name="Preview" Type="System.Object" />
        <Parameter Name="ActivePrinter" Type="System.Object" />
        <Parameter Name="PrintToFile" Type="System.Object" />
        <Parameter Name="Collate" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="From">To be added.</param>
        <param name="To">To be added.</param>
        <param name="Copies">To be added.</param>
        <param name="Preview">To be added.</param>
        <param name="ActivePrinter">To be added.</param>
        <param name="PrintToFile">To be added.</param>
        <param name="Collate">To be added.</param>
        <summary>保留以供内部使用。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public object Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Activate() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Activate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(304)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>激活单个单元格，该单元格必须处于当前选定区域内。</summary>
        <returns>To be added.</returns>
        <remarks><para>若要选择单元格区域，请使用 <see cref="M:Microsoft.Office.Interop.Excel.Range.Select" /> 方法。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AddComment">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Comment AddComment (object Text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Comment AddComment([in]object Text) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.AddComment(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddComment (Optional Text As Object) As Comment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1389)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Comment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Text" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Text">可选 <b>对象</b>。 批注文字。</param>
        <summary>为区域添加批注。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddIndent">
      <MemberSignature Language="C#" Value="public object AddIndent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AddIndent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.AddIndent" />
      <MemberSignature Language="VB.NET" Value="Public Property AddIndent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AddIndent { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1063)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1063)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1063)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定当单元格中的文本对齐方式设置为水平或垂直相等分布时，文本是否自动缩进。</summary>
        <value>To be added.</value>
        <remarks><para>如果将单元格中的文本对齐方式设置为水平或垂直相等的分布，则此属性返回<b>True。</b></para>
          <para>若要将文本对齐方式设置为相等的分布，可以将属性值设置为 <see cref="P:Microsoft.Office.Interop.Excel.Range.VerticalAlignment" /> <b>xlVAlignDistributed</b> ，当属性的值为 xlVertical 时，可以将该属性设置为 <see cref="P:Microsoft.Office.Interop.Excel.Range.Orientation" /> <b></b> <see cref="P:Microsoft.Office.Interop.Excel.Range.HorizontalAlignment" /> <b>xlHAlignDistributed</b> 。当 Orientation 属性的值为 xlHorizontal 时，可以将该属性设置为<b>xlHAlignDistributed</b>。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public string Address[object RowAbsolute, object ColumnAbsolute, Microsoft.Office.Interop.Excel.XlReferenceStyle ReferenceStyle = Microsoft.Office.Interop.Excel.XlReferenceStyle.xlA1, object External, object RelativeTo] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Address(object, object, valuetype Microsoft.Office.Interop.Excel.XlReferenceStyle, object, object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Address(System.Object,System.Object,Microsoft.Office.Interop.Excel.XlReferenceStyle,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address(Optional RowAbsolute As Object, Optional ColumnAbsolute As Object, Optional ReferenceStyle As XlReferenceStyle = Microsoft.Office.Interop.Excel.XlReferenceStyle.xlA1, Optional External As Object, Optional RelativeTo As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Address[System::Object ^, System::Object ^, Microsoft::Office::Interop::Excel::XlReferenceStyle, System::Object ^, System::Object ^] { System::String ^ get(System::Object ^ RowAbsolute, System::Object ^ ColumnAbsolute, Microsoft::Office::Interop::Excel::XlReferenceStyle ReferenceStyle, System::Object ^ External, System::Object ^ RelativeTo); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(236)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(236)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowAbsolute" Type="System.Object" />
        <Parameter Name="ColumnAbsolute" Type="System.Object" />
        <Parameter Name="ReferenceStyle" Type="Microsoft.Office.Interop.Excel.XlReferenceStyle" />
        <Parameter Name="External" Type="System.Object" />
        <Parameter Name="RelativeTo" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowAbsolute">可选 <b>对象</b>。 若为 <b>True</b>，以绝对引用的形式返回引用的行部分。 默认值为 <b>True</b>。</param>
        <param name="ColumnAbsolute">可选 <b>对象</b>。 若为 <b>True</b>，以绝对引用的形式返回引用的列部分。 默认值为 <b>True</b>。</param>
        <param name="ReferenceStyle">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlReferenceStyle" /> 。</param>
        <param name="External">可选 <b>对象</b>。 <b>如果为 True，</b> 返回外部引用; <b>如果为 False，</b> 返回本地引用。 默认值为 <b>False</b>。</param>
        <param name="RelativeTo">可选 <b>对象</b>。 如果 <paramref name="RowAbsolute" /> 和 为 <paramref name="ColumnAbsolute" /> <b>False</b>，且 <paramref name="ReferenceStyle" /> 为 <b>xlR1C1</b>，则必须包含相对引用的起始点。 此参数 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 是定义起始点的对象。</param>
        <summary>返回区域引用。</summary>
        <value>To be added.</value>
        <remarks><para>如果引用包含多个单元格， <paramref name="RowAbsolute" /> <paramref name="ColumnAbsolute" /> 并应用于所有行和列。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AddressLocal">
      <MemberSignature Language="C#" Value="public string AddressLocal[object RowAbsolute, object ColumnAbsolute, Microsoft.Office.Interop.Excel.XlReferenceStyle ReferenceStyle = Microsoft.Office.Interop.Excel.XlReferenceStyle.xlA1, object External, object RelativeTo] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AddressLocal(object, object, valuetype Microsoft.Office.Interop.Excel.XlReferenceStyle, object, object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.AddressLocal(System.Object,System.Object,Microsoft.Office.Interop.Excel.XlReferenceStyle,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddressLocal(Optional RowAbsolute As Object, Optional ColumnAbsolute As Object, Optional ReferenceStyle As XlReferenceStyle = Microsoft.Office.Interop.Excel.XlReferenceStyle.xlA1, Optional External As Object, Optional RelativeTo As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AddressLocal[System::Object ^, System::Object ^, Microsoft::Office::Interop::Excel::XlReferenceStyle, System::Object ^, System::Object ^] { System::String ^ get(System::Object ^ RowAbsolute, System::Object ^ ColumnAbsolute, Microsoft::Office::Interop::Excel::XlReferenceStyle ReferenceStyle, System::Object ^ External, System::Object ^ RelativeTo); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(437)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(437)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowAbsolute" Type="System.Object" />
        <Parameter Name="ColumnAbsolute" Type="System.Object" />
        <Parameter Name="ReferenceStyle" Type="Microsoft.Office.Interop.Excel.XlReferenceStyle" />
        <Parameter Name="External" Type="System.Object" />
        <Parameter Name="RelativeTo" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowAbsolute">可选 <b>对象</b>。 若为 <b>True</b>，以绝对引用的形式返回引用的行部分。 默认值为 <b>True</b>。</param>
        <param name="ColumnAbsolute">可选 <b>对象</b>。 若为 <b>True</b>，以绝对引用的形式返回引用的列部分。 默认值为 <b>True</b>。</param>
        <param name="ReferenceStyle">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlReferenceStyle" /> 。</param>
        <param name="External">可选 <b>对象</b>。 若为 <b>True</b>，返回外部引用。 若为 <b>False</b>，返回本地引用。 默认值为 <b>False</b>。</param>
        <param name="RelativeTo">可选 <b>对象</b>。 如果 <paramref name="RowAbsolute" /> 和 都设置为 False 且设置为 <paramref name="ColumnAbsolute" /> <b></b> <paramref name="ReferenceStyle" /> <b>xlR1C1，</b>则必须包含相对引用的起始点。 此参数 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 是一个定义引用起点的对象。</param>
        <summary>以用户语言返回对指定区域的区域引用。</summary>
        <value>To be added.</value>
        <remarks><para>如果引用包含多个单元格，并 <paramref name="RowAbsolute" /> <paramref name="ColumnAbsolute" /> 分别应用于所有行和列。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AdvancedFilter">
      <MemberSignature Language="C#" Value="public object AdvancedFilter (Microsoft.Office.Interop.Excel.XlFilterAction Action, object CriteriaRange, object CopyToRange, object Unique);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AdvancedFilter([in]valuetype Microsoft.Office.Interop.Excel.XlFilterAction Action, [in]object CriteriaRange, [in]object CopyToRange, [in]object Unique) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.AdvancedFilter(Microsoft.Office.Interop.Excel.XlFilterAction,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AdvancedFilter (Action As XlFilterAction, Optional CriteriaRange As Object, Optional CopyToRange As Object, Optional Unique As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(876)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Action" Type="Microsoft.Office.Interop.Excel.XlFilterAction" />
        <Parameter Name="CriteriaRange" Type="System.Object" />
        <Parameter Name="CopyToRange" Type="System.Object" />
        <Parameter Name="Unique" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Action">必需 <see cref="T:Microsoft.Office.Interop.Excel.XlFilterAction" /> 。 可以是以下 <b>XlFilterAction</b> 常量之一<b>：xlFilterCopy</b><b>xlFilterInPlace</b></param>
        <param name="CriteriaRange">可选 <b>对象</b>。 条件区域。 如果省略该参数，则没有条件限制。</param>
        <param name="CopyToRange">可选 <b>对象</b>。 如果 Action 为 ，则复制行的目标区域 <paramref name="xlFilterCopy" /> 。 否则，忽略该参数。</param>
        <param name="Unique">可选 <b>对象</b>。 <b>真</b> 要筛选的唯一记录; <b>如果为 False，</b> 筛选符合条件的所有记录。 默认值为 <b>False</b>。</param>
        <summary>基于条件区域从列表中筛选或复制数据。</summary>
        <returns>To be added.</returns>
        <remarks><para>如果初始选定区域为单个单元格，则使用单元格的当前区域。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AllocateChanges">
      <MemberSignature Language="C#" Value="public void AllocateChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AllocateChanges() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.AllocateChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub AllocateChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AllocateChanges();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2855)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为基于 OLAP 数据源的区域中的所有已编辑单元格执行写回操作。</summary>
        <remarks><para>方法将针对自上次提交应用更改操作以来在范围中做出的所有更改执行 <see cref="M:Microsoft.Office.Interop.Excel.Range.AllocateChanges" /> UPDATE CUBE 语句。 如果对基于非 OLAP 数据源的区域执行此方法，那么将生成运行时错误。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowEdit">
      <MemberSignature Language="C#" Value="public bool AllowEdit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowEdit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.AllowEdit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowEdit { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2020)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2020)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定是否可以在受保护的工作表上编辑区域。</summary>
        <value>To be added.</value>
        <remarks><para>如果可以在受保护的工作表上编辑区域，则此属性返回<b>True。</b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Application" /> 一个对象，该对象Microsoft Excel应用程序。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyNames">
      <MemberSignature Language="C#" Value="public object ApplyNames (object Names, object IgnoreRelativeAbsolute, object UseRowColumnNames, object OmitColumn, object OmitRow, Microsoft.Office.Interop.Excel.XlApplyNamesOrder Order = Microsoft.Office.Interop.Excel.XlApplyNamesOrder.xlRowThenColumn, object AppendLast);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ApplyNames([in]object Names, [in]object IgnoreRelativeAbsolute, [in]object UseRowColumnNames, [in]object OmitColumn, [in]object OmitRow, [in]valuetype Microsoft.Office.Interop.Excel.XlApplyNamesOrder Order, [in]object AppendLast) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ApplyNames(System.Object,System.Object,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlApplyNamesOrder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyNames (Optional Names As Object, Optional IgnoreRelativeAbsolute As Object, Optional UseRowColumnNames As Object, Optional OmitColumn As Object, Optional OmitRow As Object, Optional Order As XlApplyNamesOrder = Microsoft.Office.Interop.Excel.XlApplyNamesOrder.xlRowThenColumn, Optional AppendLast As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(441)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Names" Type="System.Object" />
        <Parameter Name="IgnoreRelativeAbsolute" Type="System.Object" />
        <Parameter Name="UseRowColumnNames" Type="System.Object" />
        <Parameter Name="OmitColumn" Type="System.Object" />
        <Parameter Name="OmitRow" Type="System.Object" />
        <Parameter Name="Order" Type="Microsoft.Office.Interop.Excel.XlApplyNamesOrder" />
        <Parameter Name="AppendLast" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Names">可选 <b>对象</b>。 要应用的名称数组。 如果省略该参数，则工作表中所有的名称都将应用到该区域上。</param>
        <param name="IgnoreRelativeAbsolute">可选 <b>对象</b>。 <b>如果为 True，</b> 则用名称替换引用，而不考虑名称或引用的引用类型; <b>如果为 False，</b> 则只将绝对引用替换为绝对名称，将相对引用仅替换为相对名称，而混合引用仅替换为混合名称。 默认值为 <b>True</b>。</param>
        <param name="UseRowColumnNames">可选 <b>对象</b>。 <b>如果为 True，</b> 则使用包含指定范围的行和列区域的名称（如果找不到区域的名称）; <b>如果为 False，</b> 忽略 <paramref name="OmitColumn" /> 和 <paramref name="OmitRow" /> 参数。 默认值为 <b>True</b>。</param>
        <param name="OmitColumn">可选 <b>对象</b>。 如果为 <b>True</b>，则用行方向的名称替换整个引用。 仅当引用的单元格与公式位于同一列中，且处于行方向命名的区域中时，才能省略列方向名称。 默认值为 <b>True</b>。</param>
        <param name="OmitRow">可选 <b>对象</b>。 如果为 <b>True</b>，则用列方向的名称替换整个引用。 仅当引用的单元格与公式位于同一行中，且处于列方向命名的区域中时，才能省略行方向名称。 默认值为 <b>True</b>。</param>
        <param name="Order">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlApplyNamesOrder" /> 。 确定用行方向区域名称和列方向区域名称替换单元格引用时，首先列出哪个区域名称。 可以是以下 <b>XlApplyNamesOrder</b> 常量之一<b>：xlColumnThenRow</b><b>xlRowThenColumn </b><paramref name="default" /></param>
        <param name="AppendLast">可选 <b>对象</b>。 <b>如果为 True，</b> 则替换 中名称的定义，并替换已定义的 <paramref name="Names" /> 姓氏的定义; <b>如果为 False，</b> 则只替换中名称 <paramref name="Names" /> 的定义。 默认值为 <b>False</b>。</param>
        <summary>将名称应用于指定区域中的单元格。</summary>
        <returns>To be added.</returns>
        <remarks><para>可以使用 Array <b>函数</b> 为参数创建名称 <paramref name="Names" /> 列表。</para>
          <para>如果要对整个工作表应用名称，可用 Cells.ApplyNames。</para>
          <para>您不能"取消应用"名称;若要删除名称，请使用 <see cref="M:Microsoft.Office.Interop.Excel.Name.Delete" /> 方法。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyOutlineStyles">
      <MemberSignature Language="C#" Value="public object ApplyOutlineStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ApplyOutlineStyles() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ApplyOutlineStyles" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyOutlineStyles () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ApplyOutlineStyles();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(448)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>对指定区域应用分级显示样式。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Areas">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Areas Areas { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Areas Areas" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Areas" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Areas As Areas" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Areas ^ Areas { Microsoft::Office::Interop::Excel::Areas ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(568)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(568)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Areas</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Areas" /> 一个集合，该集合代表多重选定区域的所有区域。</summary>
        <value>To be added.</value>
        <remarks><para>对于单个选定内容 <b>，Areas</b> 属性返回一个包含一个对象（原始对象本身） <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 的集合。 对于多重选择区域，<b>Areas</b> 属性返回一个集合，该集合包含与每个选定区域相对应的对象。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoComplete">
      <MemberSignature Language="C#" Value="public string AutoComplete (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string AutoComplete([in]string String) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.AutoComplete(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ AutoComplete(System::String ^ String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1185)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">必需的 <b>字符串</b> 。 要完成的字符串。</param>
        <summary>从列表中返回一个记忆式键入匹配项。</summary>
        <returns>To be added.</returns>
        <remarks><para>如果没有相应的记忆式键入匹配项，或者在列表中有不止一个与已键入字符串相匹配的项，此方法将返回一空字符串。</para>
          <para>即使禁止了记忆式键入功能，该方法仍能工作。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFill">
      <MemberSignature Language="C#" Value="public object AutoFill (Microsoft.Office.Interop.Excel.Range Destination, Microsoft.Office.Interop.Excel.XlAutoFillType Type = Microsoft.Office.Interop.Excel.XlAutoFillType.xlFillDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AutoFill([in]class Microsoft.Office.Interop.Excel.Range Destination, [in]valuetype Microsoft.Office.Interop.Excel.XlAutoFillType Type) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.AutoFill(Microsoft.Office.Interop.Excel.Range,Microsoft.Office.Interop.Excel.XlAutoFillType)" />
      <MemberSignature Language="VB.NET" Value="Public Function AutoFill (Destination As Range, Optional Type As XlAutoFillType = Microsoft.Office.Interop.Excel.XlAutoFillType.xlFillDefault) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(449)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Destination" Type="Microsoft.Office.Interop.Excel.Range" />
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlAutoFillType" />
      </Parameters>
      <Docs>
        <param name="Destination">必需 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象。 要填充的单元格。 目标区域必须包括源区域。</param>
        <param name="Type">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlAutoFillType" /> 。 指定填充类型。 可以是以下<b>XlAutoFillType</b>常量之一<b>：xlFillDays</b><b>xlFillFormats</b><b>xlFillSeries xlFillWeekdays</b><b>xlGrowthTrend</b><b>xlFillCopy</b><b></b><b></b> <paramref name="default" /> <b>xlFillDefault xlFillMonths</b><b>xlFillValues</b><b>xlFillYears</b><b>xlLinearTrend</b>如果此参数为<b>xlFillDefault</b>或省略，Microsoft Excel 将基于源范围选择最合适的填充类型。</param>
        <summary>对指定区域中的单元格执行自动填充。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFilter">
      <MemberSignature Language="C#" Value="public object AutoFilter (object Field, object Criteria1, Microsoft.Office.Interop.Excel.XlAutoFilterOperator Operator = Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlAnd, object Criteria2, object VisibleDropDown);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AutoFilter([in]object Field, [in]object Criteria1, [in]valuetype Microsoft.Office.Interop.Excel.XlAutoFilterOperator Operator, [in]object Criteria2, [in]object VisibleDropDown) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.AutoFilter(System.Object,System.Object,Microsoft.Office.Interop.Excel.XlAutoFilterOperator,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AutoFilter (Optional Field As Object, Optional Criteria1 As Object, Optional Operator As XlAutoFilterOperator = Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlAnd, Optional Criteria2 As Object, Optional VisibleDropDown As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(793)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Field" Type="System.Object" />
        <Parameter Name="Criteria1" Type="System.Object" />
        <Parameter Name="Operator" Type="Microsoft.Office.Interop.Excel.XlAutoFilterOperator" />
        <Parameter Name="Criteria2" Type="System.Object" />
        <Parameter Name="VisibleDropDown" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Field">可选 <b>对象</b>。 相对于作为筛选基准字段（从列表左侧开始，最左侧的字段为第一个字段）的字段的整型偏移量。</param>
        <param name="Criteria1">可选 <b>对象</b>。 条件（字符串；例如，“101”）。 使用"="查找空白字段，或使用"" &lt; &gt; 查找非空字段。 如果省略此参数，则条件为 <b>All</b>。 如果 <paramref name="Operator" /> 为<b>xlTop10Items</b>，则指定项目数 (例如，"10") 。 <paramref name="Criteria1" /></param>
        <param name="Operator">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlAutoFilterOperator" /> 。 可以是以下<b>XlAutoFilterOperator</b>常量之一<b>：xlAnd</b> <paramref name="default" /> <b>xlBottom10Items</b><b>xlBottom10Percent</b><b>xlOr xlTop10Items</b><b></b><b>xlTop10Percent</b>Use <b>xlAnd</b> and <b>xlOr</b> with and to construct compound <paramref name="Criteria1" /> <paramref name="Criteria2" /> criteria。</param>
        <param name="Criteria2">可选 <b>对象</b>。 第二个条件（字符串）。 与 Criteria1 和 Operator 一起组合成复合筛选条件。</param>
        <param name="VisibleDropDown">可选 <b>对象</b>。 <b>如果为 True，</b> 则显示筛选字段的"自动筛选"下拉箭头; <b>假</b> 以隐藏筛选字段的自动筛选下拉箭头。 默认情况下为 <b>True</b>。</param>
        <summary>使用“自动筛选”筛选一个列表。</summary>
        <returns>To be added.</returns>
        <remarks><para>将 <see cref="P:Microsoft.Office.Interop.Excel._Worksheet.AutoFilter" /> 属性应用于 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" /> 对象以返回 <see cref="T:Microsoft.Office.Interop.Excel.AutoFilter" /> 对象。</para>
          <para>如果忽略全部参数，此方法仅在指定区域切换自动筛选下拉箭头的显示。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFit">
      <MemberSignature Language="C#" Value="public object AutoFit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AutoFit() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.AutoFit" />
      <MemberSignature Language="VB.NET" Value="Public Function AutoFit () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AutoFit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(237)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>更改区域中的列宽或行高以达到最佳匹配。</summary>
        <returns>To be added.</returns>
        <remarks><para>表达式必须是行或行区域，或者列或列区域。 否则，该方法将产生错误。</para>
          <para>一个列宽单位等于“常规”样式中一个字符的宽度。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFormat">
      <MemberSignature Language="C#" Value="public object AutoFormat (Microsoft.Office.Interop.Excel.XlRangeAutoFormat Format = Microsoft.Office.Interop.Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic1, object Number, object Font, object Alignment, object Border, object Pattern, object Width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AutoFormat([in]valuetype Microsoft.Office.Interop.Excel.XlRangeAutoFormat Format, [in]object Number, [in]object Font, [in]object Alignment, [in]object Border, [in]object Pattern, [in]object Width) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.AutoFormat(Microsoft.Office.Interop.Excel.XlRangeAutoFormat,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AutoFormat (Optional Format As XlRangeAutoFormat = Microsoft.Office.Interop.Excel.XlRangeAutoFormat.xlRangeAutoFormatClassic1, Optional Number As Object, Optional Font As Object, Optional Alignment As Object, Optional Border As Object, Optional Pattern As Object, Optional Width As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(114)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Format" Type="Microsoft.Office.Interop.Excel.XlRangeAutoFormat" />
        <Parameter Name="Number" Type="System.Object" />
        <Parameter Name="Font" Type="System.Object" />
        <Parameter Name="Alignment" Type="System.Object" />
        <Parameter Name="Border" Type="System.Object" />
        <Parameter Name="Pattern" Type="System.Object" />
        <Parameter Name="Width" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Format">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlRangeAutoFormat" /> 。 指定的 AutoFormat。某些 <b>XlRangeAutoFormat</b> 常量可能不可用，这取决于语言支持 (美国英语，例如) 选择或安装的。</param>
        <param name="Number">可选 <b>对象</b>。 <b>真</b> 要包括在自动格式中的数字格式。 默认值是 <b>，则返回 True。</b></param>
        <param name="Font">可选 <b>对象</b>。 <b>真</b> 要包括在自动格式中的字体格式。 默认值为 <b>True</b>。</param>
        <param name="Alignment">可选 <b>对象</b>。 <b>真</b> 要包括在自动格式中的对齐方式。 默认值为 <b>True</b>。</param>
        <param name="Border">可选 <b>对象</b>。 <b>真</b> 要包括在自动格式中的边框格式。 默认值为 <b>True</b>。</param>
        <param name="Pattern">可选 <b>对象</b>。 <b>真</b> 要包括在自动格式中的图案格式。 默认值为 <b>True</b>。</param>
        <param name="Width">可选 <b>对象</b>。 <b>如果为 True，</b> 则自动窗体中包括列宽和行高。 默认值为 <b>True</b>。</param>
        <summary>使用预定义的格式自动设置指定区域的格式。</summary>
        <returns>To be added.</returns>
        <remarks><para>如果区域是单个单元格，此方法还会设置单元格周围的活动区域的格式。 </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoOutline">
      <MemberSignature Language="C#" Value="public object AutoOutline ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AutoOutline() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.AutoOutline" />
      <MemberSignature Language="VB.NET" Value="Public Function AutoOutline () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AutoOutline();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1036)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>自动为指定区域创建分级显示。</summary>
        <returns>To be added.</returns>
        <remarks><para>如果区域为单个单元格，Microsoft Excel 将创建整个工作表的分级显示。 新分级显示将取代所有的分级显示。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderAround">
      <MemberSignature Language="C#" Value="public object BorderAround (object LineStyle, Microsoft.Office.Interop.Excel.XlBorderWeight Weight = Microsoft.Office.Interop.Excel.XlBorderWeight.xlThin, Microsoft.Office.Interop.Excel.XlColorIndex ColorIndex = Microsoft.Office.Interop.Excel.XlColorIndex.xlColorIndexAutomatic, object Color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BorderAround([in]object LineStyle, [in]valuetype Microsoft.Office.Interop.Excel.XlBorderWeight Weight, [in]valuetype Microsoft.Office.Interop.Excel.XlColorIndex ColorIndex, [in]object Color) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.BorderAround(System.Object,Microsoft.Office.Interop.Excel.XlBorderWeight,Microsoft.Office.Interop.Excel.XlColorIndex,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BorderAround (Optional LineStyle As Object, Optional Weight As XlBorderWeight = Microsoft.Office.Interop.Excel.XlBorderWeight.xlThin, Optional ColorIndex As XlColorIndex = Microsoft.Office.Interop.Excel.XlColorIndex.xlColorIndexAutomatic, Optional Color As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1067)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="LineStyle" Type="System.Object" />
        <Parameter Name="Weight" Type="Microsoft.Office.Interop.Excel.XlBorderWeight" />
        <Parameter Name="ColorIndex" Type="Microsoft.Office.Interop.Excel.XlColorIndex" />
        <Parameter Name="Color" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="LineStyle">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlLineStyle" /> 。 边框的线条样式。 可以是以下<b>XlLineStyle</b>常量之一<b>：xlContinuous</b> <paramref name="default" /> <b>xlDash xlDashDot</b><b>xlDashDot XlDot</b><b></b><b>xlDot</b><b>xlDouble</b><b>xlLineStlyeNone</b><b>xlSlantDashDot</b><b>xlLineStlyeNone</b></param>
        <param name="Weight">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlBorderWeight" /> 。 边框粗细。 可以是以下 <b>XlBorderWeight</b> 常量之一<b>：xlHairline</b><b>xlMedium</b><b>xlThick</b><b>xlThin</b><paramref name="default" /></param>
        <param name="ColorIndex">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlColorIndex" /> 。 边框颜色，作为当前调色板的索引或作为 <b>XlColorIndex</b> 常量。 可以是以下<b>XlColorIndex</b>常量之一<b>：xlColorIndexAutomatic</b> <paramref name="default" /> <b>xlColorIndexNone</b></param>
        <param name="Color">可选 <b>对象</b>。 边框颜色，以 RGB 值表示。</param>
        <summary>向区域添加边框，并设置新边框的 、 <see cref="P:Microsoft.Office.Interop.Excel.Border.Color" /> <see cref="P:Microsoft.Office.Interop.Excel.Border.LineStyle" /> 和 <see cref="P:Microsoft.Office.Interop.Excel.Border.Weight" /> 属性。</summary>
        <returns>To be added.</returns>
        <remarks><para>必须指定 或 <paramref name="ColorIndex" /> <paramref name="Color" /> ，但不能同时指定两者。</para>
          <para>可以指定 或 <paramref name="LineStyle" /> <paramref name="Weight" /> ，但不能同时指定两者。 如果未指定任何参数，Microsoft Excel 将使用默认的线型和粗细。</para>
          <para>此方法概述整个区域，而不进行填充。 若要设置所有单元格的边框，必须设置 Borders 集合的 、 和 <see cref="P:Microsoft.Office.Interop.Excel.Borders.Color" /> <see cref="P:Microsoft.Office.Interop.Excel.Borders.LineStyle" /> <see cref="P:Microsoft.Office.Interop.Excel.Borders.Weight" /> 属性。 若要清除边框，必须将区域中的所有单元格的 <b>LineStyle</b> 属性设置为 <b>xlLineStyleNone</b>。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderAround2">
      <MemberSignature Language="C#" Value="public object BorderAround2 (object LineStyle, Microsoft.Office.Interop.Excel.XlBorderWeight Weight = Microsoft.Office.Interop.Excel.XlBorderWeight.xlThin, Microsoft.Office.Interop.Excel.XlColorIndex ColorIndex = Microsoft.Office.Interop.Excel.XlColorIndex.xlColorIndexAutomatic, object Color, object ThemeColor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BorderAround2([in]object LineStyle, [in]valuetype Microsoft.Office.Interop.Excel.XlBorderWeight Weight, [in]valuetype Microsoft.Office.Interop.Excel.XlColorIndex ColorIndex, [in]object Color, [in]object ThemeColor) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.BorderAround2(System.Object,Microsoft.Office.Interop.Excel.XlBorderWeight,Microsoft.Office.Interop.Excel.XlColorIndex,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BorderAround2 (Optional LineStyle As Object, Optional Weight As XlBorderWeight = Microsoft.Office.Interop.Excel.XlBorderWeight.xlThin, Optional ColorIndex As XlColorIndex = Microsoft.Office.Interop.Excel.XlColorIndex.xlColorIndexAutomatic, Optional Color As Object, Optional ThemeColor As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2771)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="LineStyle" Type="System.Object" />
        <Parameter Name="Weight" Type="Microsoft.Office.Interop.Excel.XlBorderWeight" />
        <Parameter Name="ColorIndex" Type="Microsoft.Office.Interop.Excel.XlColorIndex" />
        <Parameter Name="Color" Type="System.Object" />
        <Parameter Name="ThemeColor" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="LineStyle">To be added.</param>
        <param name="Weight">To be added.</param>
        <param name="ColorIndex">To be added.</param>
        <param name="Color">To be added.</param>
        <param name="ThemeColor">To be added.</param>
        <summary>仅供内部使用。</summary>
        <returns>返回 <see cref="T:System.Object" /> 。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Borders">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Borders Borders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Borders Borders" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Borders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Borders As Borders" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Borders ^ Borders { Microsoft::Office::Interop::Excel::Borders ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(435)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(435)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Borders</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回一个集合，该集合代表样式的边框或单元格区域 (包括定义为条件格式的一 <see cref="T:Microsoft.Office.Interop.Excel.Borders" />) 。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Calculate">
      <MemberSignature Language="C#" Value="public object Calculate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Calculate() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Calculate" />
      <MemberSignature Language="VB.NET" Value="Public Function Calculate () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Calculate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(279)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>计算工作表上的指定单元格区域。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CalculateRowMajorOrder">
      <MemberSignature Language="C#" Value="public object CalculateRowMajorOrder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CalculateRowMajorOrder() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.CalculateRowMajorOrder" />
      <MemberSignature Language="VB.NET" Value="Public Function CalculateRowMajorOrder () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CalculateRowMajorOrder();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2364)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>计算指定的单元格区域。</summary>
        <returns><b>Object</b></returns>
        <remarks><para>该方法按单元格计算指定的区域范围，按行主序从左上角到右下 <see cref="M:Microsoft.Office.Interop.Excel.Range.CalculateRowMajorOrder" /> 角。 Excel 2000 和早期版本使用相同的过程计算单元格区域。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cells">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Cells { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Cells" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Cells" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Cells As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ Cells { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(238)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(238)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回一个 <b>Range</b> 对象，它表示指定区域中的单元格。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Characters">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Characters Characters[object Start, object Length] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Characters Characters(object, object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Characters(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Characters(Optional Start As Object, Optional Length As Object) As Characters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Characters ^ Characters[System::Object ^, System::Object ^] { Microsoft::Office::Interop::Excel::Characters ^ get(System::Object ^ Start, System::Object ^ Length); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(603)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(603)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Characters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Object" />
        <Parameter Name="Length" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Start">可选 <b>对象</b>。 要返回的第一个字符。 如果此参数是 1 或被省略，则此属性返回一个以第一个字符为开头的字符区域。</param>
        <param name="Length">可选 <b>对象</b>。 要返回的字符数。 如果省略该参数，则此属性返回字符串的剩余部分， (字符后 <paramref name="Start" /> 的所有) 。</param>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Characters" /> 一个对象，该对象代表对象文本中的字符范围。</summary>
        <value>To be added.</value>
        <remarks><para>使用 <b>Characters</b> 对象可为文本字符串内的字符设置格式。</para>
          <para><b>Characters</b> 对象不是集合。</para>
          <para>对于 <see cref="T:Microsoft.Office.Interop.Excel.TextFrame" /> 对象， <see cref="M:Microsoft.Office.Interop.Excel.TextFrame.Characters(System.Object,System.Object)" /> 是 方法。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckSpelling">
      <MemberSignature Language="C#" Value="public object CheckSpelling (object CustomDictionary, object IgnoreUppercase, object AlwaysSuggest, object SpellLang);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CheckSpelling([in]object CustomDictionary, [in]object IgnoreUppercase, [in]object AlwaysSuggest, [in]object SpellLang) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.CheckSpelling(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckSpelling (Optional CustomDictionary As Object, Optional IgnoreUppercase As Object, Optional AlwaysSuggest As Object, Optional SpellLang As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(505)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CustomDictionary" Type="System.Object" />
        <Parameter Name="IgnoreUppercase" Type="System.Object" />
        <Parameter Name="AlwaysSuggest" Type="System.Object" />
        <Parameter Name="SpellLang" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="CustomDictionary">可选 <b>对象</b>。 一个字符串，它表示自定义词典的文件名，如果在主词典中找不到单词，则会到此词典中查找。 如果省略此参数，则使用当前指定的词典。</param>
        <param name="IgnoreUppercase">可选 <b>对象</b>。 <b>真</b>要Microsoft Excel全部大写的单词;<b>如果</b>为 False，Microsoft Excel大写单词。 如果省略此参数，将使用当前的设置。</param>
        <param name="AlwaysSuggest">可选 <b>对象</b>。 <b>如果</b>为 True，Microsoft Excel拼写不正确时显示建议的备用拼写列表;<b>如果</b>为 False，Microsoft Excel拼写正确时暂停。 如果省略此参数，将使用当前的设置。</param>
        <param name="SpellLang">可选 <b>对象</b>。 当前所用词典的语言。 可以是属性使用的 <b>MsoLanguageID</b> 值之 <see cref="P:Microsoft.Office.Core.LanguageSettings.LanguageID(Microsoft.Office.Core.MsoAppLanguageID)" /> 一。</param>
        <summary>检查对象的拼写。</summary>
        <returns>To be added.</returns>
        <remarks><para>此方法没有返回值；Microsoft Excel 显示“拼写检查”对话框。</para>
          <para>若要检查工作表上的页眉、页脚和对象，请对对象使用此方法 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" /> 。</para>
          <para>若要仅检查单元格和备注，请对属性返回的对象使用此方法 <see cref="P:Microsoft.Office.Interop.Excel.Range.Cells" /> 。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public object Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clear() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Function Clear () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(111)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除整个对象。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearComments">
      <MemberSignature Language="C#" Value="public void ClearComments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearComments() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ClearComments" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearComments ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearComments();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1390)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除指定区域的所有单元格批注。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearContents">
      <MemberSignature Language="C#" Value="public object ClearContents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ClearContents() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ClearContents" />
      <MemberSignature Language="VB.NET" Value="Public Function ClearContents () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ClearContents();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(113)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除区域中的公式。</summary>
        <returns>To be added.</returns>
        <remarks><para>此方法清除图表中的数据，但保留格式。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearFormats">
      <MemberSignature Language="C#" Value="public object ClearFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ClearFormats() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ClearFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function ClearFormats () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ClearFormats();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(112)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除对象的格式设置。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearHyperlinks">
      <MemberSignature Language="C#" Value="public void ClearHyperlinks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearHyperlinks() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ClearHyperlinks" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearHyperlinks ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearHyperlinks();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2854)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>删除指定区域中的所有超链接。</summary>
        <remarks><para>对指定区域调用方法等效于使用"开始"选项卡的"编辑"部分中的"清除超链接"下拉列表中的"清除 <see cref="M:Microsoft.Office.Interop.Excel.Range.ClearHyperlinks" /> 超链接"命令。仅删除超链接;所有其他单元格内容（如文本和格式设置）将不受影响。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearNotes">
      <MemberSignature Language="C#" Value="public object ClearNotes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ClearNotes() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ClearNotes" />
      <MemberSignature Language="VB.NET" Value="Public Function ClearNotes () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ClearNotes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(239)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除指定区域中所有单元格的批注和语音批注。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearOutline">
      <MemberSignature Language="C#" Value="public object ClearOutline ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ClearOutline() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ClearOutline" />
      <MemberSignature Language="VB.NET" Value="Public Function ClearOutline () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ClearOutline();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1037)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除指定区域的分级显示。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Column">
      <MemberSignature Language="C#" Value="public int Column { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Column" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Column" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Column As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Column { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(240)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(240)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回指定区域中第一块中的第一列的列号。</summary>
        <value>To be added.</value>
        <remarks><para>A 列返回 1，B 列返回 2，依此类推。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnDifferences">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range ColumnDifferences (object Comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range ColumnDifferences([in]object Comparison) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ColumnDifferences(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ColumnDifferences (Comparison As Object) As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Office::Interop::Excel::Range ^ ColumnDifferences(System::Object ^ Comparison);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(510)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Comparison" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Comparison">必需的 <b>对象</b>。 用于对指定区域进行比较的单个单元格。</param>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 一个对象，该对象表示其内容与每列中的比较单元格不同的所有单元格。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Columns" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Columns" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Columns As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ Columns { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(241)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(241)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 一个对象，该对象代表指定范围中的列。</summary>
        <value>To be added.</value>
        <remarks><para>此属性在应用于一个是多重选定区域的 <b>Range</b> 对象时，会只从该区域的第一个子区域中返回列。 例如，如果 <b>Range</b> 对象有两个子区域 A1：B2 和 C3：D4，则该属性 <see cref="P:Microsoft.Office.Interop.Excel.Range.Count" /> 返回 2，而不是 4。 若要对可能包含多区域选定区域的区域使用此属性，请测试对象的属性以确定该区域是否包含多个 <see cref="P:Microsoft.Office.Interop.Excel.Areas.Count" /> <see cref="T:Microsoft.Office.Interop.Excel.Areas" /> 区域。 如果包含，则对该区域中的每个子区域进行循环。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidth">
      <MemberSignature Language="C#" Value="public object ColumnWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ColumnWidth" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.ColumnWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnWidth As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ColumnWidth { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(242)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(242)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(242)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置指定区域中所有列的列宽。</summary>
        <value>To be added.</value>
        <remarks><para>一个列宽单位等于“常规”样式中一个字符的宽度。对于比例字体，则使用字符 0（零）的宽度。</para>
          <para>使用 <see cref="P:Microsoft.Office.Interop.Excel.Range.Width" /> 属性可返回列的宽度（以点表示）。</para>
          <para>如果区域中所有列的列宽都相等，<b>ColumnWidth</b> 属性返回该宽度值。如果区域中的列宽不等，本属性返回 <b>Null</b>。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Comment">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Comment Comment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Comment Comment" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Comment" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comment As Comment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Comment ^ Comment { Microsoft::Office::Interop::Excel::Comment ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(910)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(910)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Comment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回一个对象，该对象代表与区域左上角的单元格 <see cref="T:Microsoft.Office.Interop.Excel.Comment" /> 相关联的批注。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Consolidate">
      <MemberSignature Language="C#" Value="public object Consolidate (object Sources, object Function, object TopRow, object LeftColumn, object CreateLinks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Consolidate([in]object Sources, [in]object Function, [in]object TopRow, [in]object LeftColumn, [in]object CreateLinks) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Consolidate(System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Consolidate (Optional Sources As Object, Optional Function As Object, Optional TopRow As Object, Optional LeftColumn As Object, Optional CreateLinks As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(482)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Sources" Type="System.Object" />
        <Parameter Name="Function" Type="System.Object" />
        <Parameter Name="TopRow" Type="System.Object" />
        <Parameter Name="LeftColumn" Type="System.Object" />
        <Parameter Name="CreateLinks" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Sources">可选 <b>对象</b>。 以文本引用字符串数组的形式给出合并计算的源，该数组采用 R1C1-样式表示法。 这些引用必须包含将要合并计算的工作表的完整路径。</param>
        <param name="Function">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlConsolidationFunction" /> 。 可以是以下<b>XlConsilidationFunction</b>常量之一<b>：xlAverage</b> <paramref name="default" /> <b>xlCount xlCountNums</b><b></b><b>xlMax</b><b>xlMin</b><b>xlProduct xlStDev</b><b>xlStDev xlStDevP</b><b>xlSum</b><b>xlVar xlVarP</b><b></b> <b></b></param>
        <param name="TopRow">可选 <b>对象</b>。 <b>如果为 True，</b> 则基于合并区域首行中的列标题合并数据; <b>如果为 False，</b> 将按位置合并数据。 默认值为 <b>False</b>。</param>
        <param name="LeftColumn">可选 <b>对象</b>。 <b>如果为 True，</b> 则基于合并区域左侧列中的行标题合并数据; <b>如果为 False，</b> 将按位置合并数据。 默认值为 <b>False</b>。</param>
        <param name="CreateLinks">可选 <b>对象</b>。 <b>如果为 True，</b> 则让合并使用工作表链接; <b>如果为 False，</b> 合并时将复制数据。 默认值为 <b>False</b>。</param>
        <summary>将多个工作表中多个区域的数据合并计算至单个工作表上的单个区域。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public object Copy (object Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Copy([in]object Destination) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Copy(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy (Optional Destination As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(551)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Destination" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Destination">可选 <b>对象</b>。 指定要将指定区域复制到的新区域。 如果省略此参数，则 Microsoft Excel 会将区域复制到剪贴板。</param>
        <summary>将区域复制到指定的区域或剪贴板。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyFromRecordset">
      <MemberSignature Language="C#" Value="public int CopyFromRecordset (object Data, object MaxRows, object MaxColumns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CopyFromRecordset([in]object Data, [in]object MaxRows, [in]object MaxColumns) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.CopyFromRecordset(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyFromRecordset (Data As Object, Optional MaxRows As Object, Optional MaxColumns As Object) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1152)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Data" Type="System.Object" />
        <Parameter Name="MaxRows" Type="System.Object" />
        <Parameter Name="MaxColumns" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Data">必需的 <b>对象</b>。 复制到范围中的 <b>Recordset</b> 对象。</param>
        <param name="MaxRows">可选 <b>对象</b>。 复制到工作表中的记录数上限。 如果省略该自变量，则会复制 <b>Recordset</b> 对象中的所有记录。</param>
        <param name="MaxColumns">可选 <b>对象</b>。 复制到工作表中的字段数上限。 如果省略该自变量，则会复制 <b>Recordset</b> 对象中的所有字段。</param>
        <summary>从指定范围的左上角开始，将 ADO 或 DAO <b>Recordset</b> 对象的内容复制到工作表中。</summary>
        <returns>To be added.</returns>
        <remarks><para>如果 <b>Recordset</b> 对象包含具有 OLE 对象的字段，则该方法无效。</para>
          <para>从 <b>Recordset</b> 对象当前所在的行开始复制。复制完成后，<b>Recordset</b> 对象的 <b>EOF</b> 属性为 <b>True</b>。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyPicture">
      <MemberSignature Language="C#" Value="public object CopyPicture (Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, Microsoft.Office.Interop.Excel.XlCopyPictureFormat Format = Microsoft.Office.Interop.Excel.XlCopyPictureFormat.xlPicture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CopyPicture([in]valuetype Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance, [in]valuetype Microsoft.Office.Interop.Excel.XlCopyPictureFormat Format) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.CopyPicture(Microsoft.Office.Interop.Excel.XlPictureAppearance,Microsoft.Office.Interop.Excel.XlCopyPictureFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyPicture (Optional Appearance As XlPictureAppearance = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, Optional Format As XlCopyPictureFormat = Microsoft.Office.Interop.Excel.XlCopyPictureFormat.xlPicture) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(213)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Appearance" Type="Microsoft.Office.Interop.Excel.XlPictureAppearance" />
        <Parameter Name="Format" Type="Microsoft.Office.Interop.Excel.XlCopyPictureFormat" />
      </Parameters>
      <Docs>
        <param name="Appearance">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlPictureAppearance" /> 。 指定图片的复制方式。 可以是以下 <b>XlCopyPictureFormat</b> 常量之一<b>：xlBitmap</b><b>xlPicture</b><paramref name="default" /></param>
        <param name="Format">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlCopyPictureFormat" /> 。 图片的格式。 可以是以下 <b>XlPictureAppearance</b> 常量之<b>一：xlPrinter</b>。 图片将像打印时一样进行复制。<b>xlScreen</b> <paramref name="default" /> 。 图片尽可能按其屏幕显示进行复制。</param>
        <summary>将所选对象作为图片复制到剪贴板。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(118)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(118)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回集合中对象的数目。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountLarge">
      <MemberSignature Language="C#" Value="public object CountLarge { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CountLarge" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.CountLarge" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CountLarge As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CountLarge { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2499)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2499)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>计算给定值范围中的最大值。 只读。</summary>
        <value><b>Object</b></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNames">
      <MemberSignature Language="C#" Value="public object CreateNames (object Top, object Left, object Bottom, object Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreateNames([in]object Top, [in]object Left, [in]object Bottom, [in]object Right) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.CreateNames(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateNames (Optional Top As Object, Optional Left As Object, Optional Bottom As Object, Optional Right As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(457)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Top" Type="System.Object" />
        <Parameter Name="Left" Type="System.Object" />
        <Parameter Name="Bottom" Type="System.Object" />
        <Parameter Name="Right" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Top">可选 <b>对象</b>。 如果该值为 <b>True</b>，则使用顶部行中的标签创建名称。 默认值为 <b>False</b>。</param>
        <param name="Left">可选 <b>对象</b>。 如果该值为 <b>True</b>，则使用左侧列中的标签创建名称。 默认值为 <b>False</b>。</param>
        <param name="Bottom">可选 <b>对象</b>。 如果该值为 <b>True</b>，则使用底部行中的标签创建名称。 默认值为 <b>False</b>。</param>
        <param name="Right">可选 <b>对象</b>。 如果该值为 <b>True</b>，则使用右侧列中的标签创建名称。 默认值为 <b>False</b>。</param>
        <summary>在指定区域中依据工作表中的文本标签创建名称。</summary>
        <returns>To be added.</returns>
        <remarks><para>如果不指定 、 、 或 ，则Microsoft Excel根据指定区域的形状来猜测文本 <paramref name="Top" /> <paramref name="Left" /> <paramref name="Bottom" /> <paramref name="Right" /> 标签的位置。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePublisher">
      <MemberSignature Language="C#" Value="public object CreatePublisher (object Edition, Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, object ContainsPICT, object ContainsBIFF, object ContainsRTF, object ContainsVALU);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object CreatePublisher([in]object Edition, [in]valuetype Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance, [in]object ContainsPICT, [in]object ContainsBIFF, [in]object ContainsRTF, [in]object ContainsVALU) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.CreatePublisher(System.Object,Microsoft.Office.Interop.Excel.XlPictureAppearance,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreatePublisher (Optional Edition As Object, Optional Appearance As XlPictureAppearance = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, Optional ContainsPICT As Object, Optional ContainsBIFF As Object, Optional ContainsRTF As Object, Optional ContainsVALU As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(458)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Edition" Type="System.Object" />
        <Parameter Name="Appearance" Type="Microsoft.Office.Interop.Excel.XlPictureAppearance" />
        <Parameter Name="ContainsPICT" Type="System.Object" />
        <Parameter Name="ContainsBIFF" Type="System.Object" />
        <Parameter Name="ContainsRTF" Type="System.Object" />
        <Parameter Name="ContainsVALU" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Edition">此参数仅适用于 Macintosh 并且不应使用。</param>
        <param name="Appearance">此参数仅适用于 Macintosh 并且不应使用。</param>
        <param name="ContainsPICT">此参数仅适用于 Macintosh 并且不应使用。</param>
        <param name="ContainsBIFF">此参数仅适用于 Macintosh 并且不应使用。</param>
        <param name="ContainsRTF">此参数仅适用于 Macintosh 并且不应使用。</param>
        <param name="ContainsVALU">此参数仅适用于 Macintosh 并且不应使用。</param>
        <summary>您请求了仅用于 Macintosh 上的关键字的帮助。 有关该关键词的帮助信息，请查阅 Microsoft Office Macintosh 版的语言参考帮助。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回一个 32 位整数，该整数指示在其中创建了此对象的应用程序。</summary>
        <value>To be added.</value>
        <remarks><para>如果指定的对象是在 Microsoft Excel 中创建的，则此属性返回字符串 XCEL，它等效于十六进制数 5843454C。</para>
          <para><b>Creator</b> 属性是为 Macintosh 上的 Microsoft Excel 设计的，在 Macintosh 上，每个应用程序都具有一个四字符的创建者代码。 例如，Microsoft Excel 的创建者代码为 XCEL。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentArray">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range CurrentArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range CurrentArray" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.CurrentArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentArray As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ CurrentArray { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(501)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(501)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>如果指定的单元格是数组的一部分，则返回 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 一个代表整个数组的对象。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentRegion">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range CurrentRegion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range CurrentRegion" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.CurrentRegion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentRegion As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ CurrentRegion { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(243)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(243)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 一个代表当前区域的对象。</summary>
        <value>To be added.</value>
        <remarks><para>当前区域是空白行和空白列的任何组合所限定的区域。</para>
          <para>此属性对于自动扩展所选内容以包含整个当前区域（如 方法）的许多操作 <see cref="M:Microsoft.Office.Interop.Excel.Range.AutoFormat(Microsoft.Office.Interop.Excel.XlRangeAutoFormat,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" /> 很有用。</para>
          <para>该属性不能用于被保护的工作表。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Cut">
      <MemberSignature Language="C#" Value="public object Cut (object Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Cut([in]object Destination) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Cut(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Cut (Optional Destination As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(565)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Destination" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Destination">可选 <b>对象</b>。 应在其中粘贴对象的目标区域。 如果省略此参数，区域对象会被剪切到剪贴板。</param>
        <summary>将对象剪切到剪贴板，或者将其粘贴到指定的目的地。</summary>
        <returns>To be added.</returns>
        <remarks><para>剪切的区域必须由相邻的单元格组成。</para>
          <para>只可剪切嵌入式图表。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSeries">
      <MemberSignature Language="C#" Value="public object DataSeries (object Rowcol, Microsoft.Office.Interop.Excel.XlDataSeriesType Type = Microsoft.Office.Interop.Excel.XlDataSeriesType.xlDataSeriesLinear, Microsoft.Office.Interop.Excel.XlDataSeriesDate Date = Microsoft.Office.Interop.Excel.XlDataSeriesDate.xlDay, object Step, object Stop, object Trend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object DataSeries([in]object Rowcol, [in]valuetype Microsoft.Office.Interop.Excel.XlDataSeriesType Type, [in]valuetype Microsoft.Office.Interop.Excel.XlDataSeriesDate Date, [in]object Step, [in]object Stop, [in]object Trend) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.DataSeries(System.Object,Microsoft.Office.Interop.Excel.XlDataSeriesType,Microsoft.Office.Interop.Excel.XlDataSeriesDate,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DataSeries (Optional Rowcol As Object, Optional Type As XlDataSeriesType = Microsoft.Office.Interop.Excel.XlDataSeriesType.xlDataSeriesLinear, Optional Date As XlDataSeriesDate = Microsoft.Office.Interop.Excel.XlDataSeriesDate.xlDay, Optional Step As Object, Optional Stop As Object, Optional Trend As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(464)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rowcol" Type="System.Object" />
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlDataSeriesType" />
        <Parameter Name="Date" Type="Microsoft.Office.Interop.Excel.XlDataSeriesDate" />
        <Parameter Name="Step" Type="System.Object" />
        <Parameter Name="Stop" Type="System.Object" />
        <Parameter Name="Trend" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Rowcol">可选 <b>对象</b>。 可以是 <b>xlRows</b> 或 <b>xlColumns</b> 常量，分别表示按行或列输入数据系列。 如果省略本参数，则使用区域的大小和形状。</param>
        <param name="Type">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlDataSeriesType" /> 。 可以是以下<b>XlDataSeriesType</b>常量之一<b>：xlAutoFill</b><b>xlDataSeriesLinear</b> <paramref name="default" /> <b>xlChronological</b><b>xlGrowth</b></param>
        <param name="Date">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlDataSeriesDate" /> 。 如果 Type 参数是 <b>xlChronological</b>， <b>则 Date</b> 参数指示步骤日期单位。 可以是以下<b>XlDataSeriesDate</b>常量之一<b>：xlDay</b> <paramref name="default" /> <b>xlWeekday</b><b>xlMonth</b><b>xlYear</b></param>
        <param name="Step">可选 <b>对象</b>。 系列的步长值。 默认值为 1。</param>
        <param name="Stop">可选 <b>对象</b>。 系列的终止值。 如果省略本参数，Microsoft Excel 将填满整个区域。</param>
        <param name="Trend">可选 <b>对象</b>。 <b>真</b> 要创建线性趋势或增长趋势; <b>如果为 False，</b> 将创建标准数据系列。 默认值为 <b>False</b>。</param>
        <summary>在指定区域内创建数据系列。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public object Delete (object Shift);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Delete([in]object Shift) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Delete(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (Optional Shift As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(117)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Shift" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Shift">可选 <b>对象</b>。 指定如何移动单元格来替换删除的单元格。 可以是下列常量之一 <see cref="T:Microsoft.Office.Interop.Excel.XlDeleteShiftDirection" /> <b>：xlShiftToLeft</b> 或 <b>xlShiftUp</b>。 如果省略此参数，Microsoft Excel 将根据区域的形状确定调整方式。</param>
        <summary>删除对象。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependents">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Dependents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Dependents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Dependents" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dependents As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ Dependents { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(543)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(543)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 一个对象，该对象表示包含单元格的所有从属单元格的范围。</summary>
        <value>To be added.</value>
        <remarks><para>如果有多个从属单元格，这可能有多个选择（多个 <b>Range</b> 对象）。</para>
          <para><b>Dependents</b> 属性仅在活动工作表中有效，不能追踪远程引用。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DialogBox">
      <MemberSignature Language="C#" Value="public object DialogBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object DialogBox() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.DialogBox" />
      <MemberSignature Language="VB.NET" Value="Public Function DialogBox () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DialogBox();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(245)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>显示由 Microsoft Excel 4.0 宏工作表上的对话框定义表所定义的对话框。</summary>
        <returns>To be added.</returns>
        <remarks><para>此方法返回所选控件的编号，或者如果用户单击"取消"按钮，则返回<b>False。</b></para>
          <para>返回 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 的对象必须引用 4.0 宏表上的Microsoft Excel定义表。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectDependents">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range DirectDependents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range DirectDependents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.DirectDependents" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DirectDependents As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ DirectDependents { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(545)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(545)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 一个对象，该对象代表包含单元格的所有直接从属单元格的范围。</summary>
        <value>To be added.</value>
        <remarks><para>如果有多个从属单元格，这可能有多个选择（多个 <b>Range</b> 对象）。</para>
          <para><b>Direct Dependents</b> 属性仅在活动工作表中有效，不能追踪远程引用。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectPrecedents">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range DirectPrecedents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range DirectPrecedents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.DirectPrecedents" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DirectPrecedents As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ DirectPrecedents { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(546)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(546)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 一个对象，该对象代表包含单元格的所有直接引用单元格的范围。</summary>
        <value>To be added.</value>
        <remarks><para><b>DirectPrecedents</b> 属性仅在活动工作表中有效，不能追踪远程引用。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Dirty">
      <MemberSignature Language="C#" Value="public void Dirty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dirty() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Dirty" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dirty ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dirty();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2014)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>下一次重新计算发生时指定要重新计算的区域。</summary>
        <remarks><para><see cref="M:Microsoft.Office.Interop.Excel.Range.Calculate" />方法强制重新计算指定区域，对于Microsoft Excel需要重新计算的单元格。</para>
          <para>如果应用程序在手动计算模式下，则使用 Excel <see cref="M:Microsoft.Office.Interop.Excel.Range.Dirty" /> 指示要重新计算的指定单元格。 如果应用程序处于自动计算模式，请使用 <b>Dirty</b> 方法使 Excel 执行重新计算。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DiscardChanges">
      <MemberSignature Language="C#" Value="public void DiscardChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DiscardChanges() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.DiscardChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub DiscardChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DiscardChanges();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2856)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>放弃区域中经过编辑的单元格中的所有更改。</summary>
        <remarks><para>对于基于 OLAP 数据源的区域，该方法删除单元格中输入的所有值和公式，然后运行更新操作从数据源检索最新值。 它将数据源值设置为空引用， (编辑的所有值单元格的 Visual Basic) 中为 Nothing，并且还会对 OLAP 服务器执行 ROLLBACK TRANSACTION 语句。 对于基于非 OLAP 数据源的区域，此方法直接清除所有编辑过的单元格。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayFormat">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.DisplayFormat DisplayFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.DisplayFormat DisplayFormat" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.DisplayFormat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayFormat As DisplayFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::DisplayFormat ^ DisplayFormat { Microsoft::Office::Interop::Excel::DisplayFormat ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(666)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(666)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.DisplayFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Interop.Excel.DisplayFormat" /> 一个对象，该对象代表指定范围的显示设置。</summary>
        <value>一 <see cref="T:Microsoft.Office.Interop.Excel.DisplayFormat" /> 个代表指定范围的显示设置的对象。</value>
        <remarks><para>只读。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="EditionOptions">
      <MemberSignature Language="C#" Value="public object EditionOptions (Microsoft.Office.Interop.Excel.XlEditionType Type, Microsoft.Office.Interop.Excel.XlEditionOptionsOption Option, object Name, object Reference, Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, Microsoft.Office.Interop.Excel.XlPictureAppearance ChartSize = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, object Format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EditionOptions([in]valuetype Microsoft.Office.Interop.Excel.XlEditionType Type, [in]valuetype Microsoft.Office.Interop.Excel.XlEditionOptionsOption Option, [in]object Name, [in]object Reference, [in]valuetype Microsoft.Office.Interop.Excel.XlPictureAppearance Appearance, [in]valuetype Microsoft.Office.Interop.Excel.XlPictureAppearance ChartSize, [in]object Format) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.EditionOptions(Microsoft.Office.Interop.Excel.XlEditionType,Microsoft.Office.Interop.Excel.XlEditionOptionsOption,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlPictureAppearance,Microsoft.Office.Interop.Excel.XlPictureAppearance,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EditionOptions (Type As XlEditionType, Option As XlEditionOptionsOption, Optional Name As Object, Optional Reference As Object, Optional Appearance As XlPictureAppearance = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, Optional ChartSize As XlPictureAppearance = Microsoft.Office.Interop.Excel.XlPictureAppearance.xlScreen, Optional Format As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1131)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlEditionType" />
        <Parameter Name="Option" Type="Microsoft.Office.Interop.Excel.XlEditionOptionsOption" />
        <Parameter Name="Name" Type="System.Object" />
        <Parameter Name="Reference" Type="System.Object" />
        <Parameter Name="Appearance" Type="Microsoft.Office.Interop.Excel.XlPictureAppearance" />
        <Parameter Name="ChartSize" Type="Microsoft.Office.Interop.Excel.XlPictureAppearance" />
        <Parameter Name="Format" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type">此参数仅适用于 Macintosh 并且不应使用。</param>
        <param name="Option">此参数仅适用于 Macintosh 并且不应使用。</param>
        <param name="Name">此参数仅适用于 Macintosh 并且不应使用。</param>
        <param name="Reference">此参数仅适用于 Macintosh 并且不应使用。</param>
        <param name="Appearance">此参数仅适用于 Macintosh 并且不应使用。</param>
        <param name="ChartSize">此参数仅适用于 Macintosh 并且不应使用。</param>
        <param name="Format">此参数仅适用于 Macintosh 并且不应使用。</param>
        <summary>您请求了仅用于 Macintosh 上的关键字的帮助。 有关该关键词的帮助信息，请查阅 Microsoft Office Macintosh 版的语言参考帮助。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="End">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range End[Microsoft.Office.Interop.Excel.XlDirection Direction] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range End(valuetype Microsoft.Office.Interop.Excel.XlDirection)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.End(Microsoft.Office.Interop.Excel.XlDirection)" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property End(Direction As XlDirection) As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ End[Microsoft::Office::Interop::Excel::XlDirection] { Microsoft::Office::Interop::Excel::Range ^ get(Microsoft::Office::Interop::Excel::XlDirection Direction); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(500)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(500)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Direction" Type="Microsoft.Office.Interop.Excel.XlDirection" />
      </Parameters>
      <Docs>
        <param name="Direction">必需 <see cref="T:Microsoft.Office.Interop.Excel.XlDirection" /> 。 移动方向。</param>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 一个对象，该对象代表包含源区域的区域末尾的单元格。</summary>
        <value>To be added.</value>
        <remarks><para>相当于按 End+向上键、End+向下键、End+向左键或 End+向右键。 </para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="EntireColumn">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range EntireColumn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range EntireColumn" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.EntireColumn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntireColumn As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ EntireColumn { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(246)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(246)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回一 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 个对象，该对象代表包含 (区域) 列。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EntireRow">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range EntireRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range EntireRow" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.EntireRow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntireRow As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ EntireRow { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(247)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(247)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回一 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 个对象，该对象代表包含指定 (区域) 一行或多行。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Errors">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Errors Errors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Errors Errors" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Errors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Errors As Errors" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Errors ^ Errors { Microsoft::Office::Interop::Excel::Errors ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2015)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2015)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Errors</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>允许用户访问错误检查选项。</summary>
        <value>To be added.</value>
        <remarks><para>引用 <see cref="T:Microsoft.Office.Interop.Excel.Errors" /> 对象以查看与错误检查选项关联的索引值列表。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportAsFixedFormat">
      <MemberSignature Language="C#" Value="public void ExportAsFixedFormat (Microsoft.Office.Interop.Excel.XlFixedFormatType Type, object Filename, object Quality, object IncludeDocProperties, object IgnorePrintAreas, object From, object To, object OpenAfterPublish, object FixedFormatExtClassPtr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExportAsFixedFormat([in]valuetype Microsoft.Office.Interop.Excel.XlFixedFormatType Type, [in]object Filename, [in]object Quality, [in]object IncludeDocProperties, [in]object IgnorePrintAreas, [in]object From, [in]object To, [in]object OpenAfterPublish, [in]object FixedFormatExtClassPtr) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ExportAsFixedFormat(Microsoft.Office.Interop.Excel.XlFixedFormatType,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExportAsFixedFormat (Type As XlFixedFormatType, Optional Filename As Object, Optional Quality As Object, Optional IncludeDocProperties As Object, Optional IgnorePrintAreas As Object, Optional From As Object, Optional To As Object, Optional OpenAfterPublish As Object, Optional FixedFormatExtClassPtr As Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2493)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlFixedFormatType" />
        <Parameter Name="Filename" Type="System.Object" />
        <Parameter Name="Quality" Type="System.Object" />
        <Parameter Name="IncludeDocProperties" Type="System.Object" />
        <Parameter Name="IgnorePrintAreas" Type="System.Object" />
        <Parameter Name="From" Type="System.Object" />
        <Parameter Name="To" Type="System.Object" />
        <Parameter Name="OpenAfterPublish" Type="System.Object" />
        <Parameter Name="FixedFormatExtClassPtr" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type">必需 <see cref="T:Microsoft.Office.Interop.Excel.XlFixedFormatType" /> 要导出到的文件格式的类型。</param>
        <param name="Filename"><b>可选对象</b>要保存的文件的文件名。 可以包括完整路径，short_Excel2007将文件保存到当前文件夹中。</param>
        <param name="Quality">可选 <b>对象</b> 通常格式化为 <see cref="T:Microsoft.Office.Interop.Excel.XlFixedFormatQuality" /> 。 指定已发布文件的质量。</param>
        <param name="IncludeDocProperties">可选 <b>对象</b> 设置为 <b>True</b> 以包括文档属性;否则 <b>为 False</b>。</param>
        <param name="IgnorePrintAreas">可选 <b>对象</b> 设置为 <b>True</b> 以忽略发布时设置的任何打印区域;否则 <b>为 False</b>。</param>
        <param name="From"><b>可选对象</b>开始发布的页面的编号。 如果省略此参数，则从头开始发布。</param>
        <param name="To">可选 <b>对象</b> 要发布的最后一页的页码。 如果省略此参数，则发布至最后一页。</param>
        <param name="OpenAfterPublish">可选 <b>对象</b> ，设置为 <b>True</b> 以在发布文件后在查看器中显示文件;否则 <b>为 False</b>。</param>
        <param name="FixedFormatExtClassPtr">可选 <b>对象</b> 指针，指向 <b>FixedFormatExt</b> 类。</param>
        <summary>导出为指定格式的文件。</summary>
        <remarks><para>此方法还支持初始化加载项，以将文件导出为固定格式的文件。例如，如果存在转换器，则 Excel 将执行文件格式转换。转换通常由用户执行。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FillDown">
      <MemberSignature Language="C#" Value="public object FillDown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FillDown() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.FillDown" />
      <MemberSignature Language="VB.NET" Value="Public Function FillDown () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FillDown();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(248)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从指定区域的顶部单元格开始向下填充，直至该区域的底部。</summary>
        <returns>To be added.</returns>
        <remarks><para>区域中首行单元格的内容和格式将复制到区域中其他行内。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FillLeft">
      <MemberSignature Language="C#" Value="public object FillLeft ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FillLeft() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.FillLeft" />
      <MemberSignature Language="VB.NET" Value="Public Function FillLeft () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FillLeft();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(249)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从指定区域的最右边单元格开始向左填充。</summary>
        <returns>To be added.</returns>
        <remarks><para>区域中最右列单元格的内容和格式将复制到区域中其他列内。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FillRight">
      <MemberSignature Language="C#" Value="public object FillRight ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FillRight() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.FillRight" />
      <MemberSignature Language="VB.NET" Value="Public Function FillRight () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FillRight();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(250)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从指定区域的最左边单元格开始向右填充。</summary>
        <returns>To be added.</returns>
        <remarks><para>区域中最左列单元格的内容和格式将复制到区域中其他列内。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FillUp">
      <MemberSignature Language="C#" Value="public object FillUp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FillUp() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.FillUp" />
      <MemberSignature Language="VB.NET" Value="Public Function FillUp () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FillUp();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(251)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从指定区域的底部单元格开始向上填充，直至该区域的顶部。</summary>
        <returns>To be added.</returns>
        <remarks><para>区域中尾行单元格的内容和格式将复制到区域中其他行内。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Find (object What, object After, object LookIn, object LookAt, object SearchOrder, Microsoft.Office.Interop.Excel.XlSearchDirection SearchDirection = Microsoft.Office.Interop.Excel.XlSearchDirection.xlNext, object MatchCase, object MatchByte, object SearchFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range Find([in]object What, [in]object After, [in]object LookIn, [in]object LookAt, [in]object SearchOrder, [in]valuetype Microsoft.Office.Interop.Excel.XlSearchDirection SearchDirection, [in]object MatchCase, [in]object MatchByte, [in]object SearchFormat) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Find(System.Object,System.Object,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSearchDirection,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (What As Object, Optional After As Object, Optional LookIn As Object, Optional LookAt As Object, Optional SearchOrder As Object, Optional SearchDirection As XlSearchDirection = Microsoft.Office.Interop.Excel.XlSearchDirection.xlNext, Optional MatchCase As Object, Optional MatchByte As Object, Optional SearchFormat As Object) As Range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(398)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="What" Type="System.Object" />
        <Parameter Name="After" Type="System.Object" />
        <Parameter Name="LookIn" Type="System.Object" />
        <Parameter Name="LookAt" Type="System.Object" />
        <Parameter Name="SearchOrder" Type="System.Object" />
        <Parameter Name="SearchDirection" Type="Microsoft.Office.Interop.Excel.XlSearchDirection" />
        <Parameter Name="MatchCase" Type="System.Object" />
        <Parameter Name="MatchByte" Type="System.Object" />
        <Parameter Name="SearchFormat" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="What">必需的 <b>对象</b>。 要搜索的数据。 可为字符串或任意 Microsoft Excel 数据类型。</param>
        <param name="After">可选 <b>对象</b>。 要在其后开始搜索的单元格。 从用户界面搜索时，这对应于活动单元格的位置。 请注意：<b>After</b> 必须是区域中的单个单元格。 请记住，搜索从该单元格开始;在方法环绕到此单元格之前，不会搜索 <paramref name="after" /> 指定的单元格。 如果不指定此参数，搜索将开始在区域左上角的单元格之后。</param>
        <param name="LookIn">可选 <b>对象</b>。 信息的类型。</param>
        <param name="LookAt">可选 <b>对象</b>。 可以是下列常量之一 <see cref="T:Microsoft.Office.Interop.Excel.XlLookAt" /> <b>：xlWhole 或</b> <b>xlPart</b>。</param>
        <param name="SearchOrder">可选 <b>对象</b>。 可以是下列常量之一 <see cref="T:Microsoft.Office.Interop.Excel.XlSearchOrder" /> <b>：xlByRows</b> 或 <b>xlByColumns</b>。</param>
        <param name="SearchDirection">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlSearchDirection" /> 。 搜索的方向。 可以是以下 XlSearchDirection 常量之一<b>：xlNext</b> <paramref name="default" /> <b>xlPrevious</b></param>
        <param name="MatchCase">可选 <b>对象</b>。 如果为 <b>True</b>，则搜索区分大小写。 默认值为 <b>False</b> 。</param>
        <param name="MatchByte">可选 <b>对象</b>。 仅在选择或安装了双字节语言支持时使用。 <b>如果为 True，</b> 双字节字符仅与双字节字符匹配; <b>如果为 False，</b> 使双字节字符与它们的单字节等效字符匹配。</param>
        <param name="SearchFormat">可选 <b>对象</b>。 搜索格式。</param>
        <summary>在一个范围中查找特定信息并返回一个对象，该对象代表找到该信息 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 的第一个单元格。</summary>
        <returns>To be added.</returns>
        <remarks><para>如果未发现匹配项，此方法返回 <b>Nothing</b>。</para>
          <para>此方法不影响选定内容或活动单元格。</para>
          <para>每次使用此方法时，将保存 、 和 <paramref name="LookIn" /> <paramref name="LookAt" /> <paramref name="SearchOrder" /> <paramref name="MatchByte" /> 的设置。 如果在下次调用方法时不指定这些参数的值，则使用保存的值。 设置这些参数会更改“查找”对话框中的设置，更改“查找”对话框中的设置会更改省略参数时使用的已保存值。 为避免出现问题，请在每次使用此方法时显式设置这些参数。</para>
          <para>可以使用 和 <see cref="M:Microsoft.Office.Interop.Excel.Range.FindNext(System.Object)" /> <see cref="M:Microsoft.Office.Interop.Excel.Range.FindPrevious(System.Object)" /> 方法重复搜索。</para>
          <para>当查找到指定查找区域的末尾时，本方法将环绕至区域的开始继续搜索。发生环绕后，为停止查找，可保存第一次找到的单元格地址，然后测试下一个查找到的单元格地址是否与其相同。</para>
          <para>若要查找与更复杂模式匹配的单元格，请将 <b>For Each...Next</b> 语句与 <b>Like</b> 运算符结合使用。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FindNext">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range FindNext (object After);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range FindNext([in]object After) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.FindNext(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindNext (Optional After As Object) As Range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(399)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="After" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="After">可选 <b>对象</b>。 指定一个单元格，查找将从该单元格之后开始。 此单元格对应于从用户界面搜索时的活动单元格位置。 请注意 <paramref name="After" /> ，必须是范围中的单个单元格。 请记住，搜索从该单元格开始;在方法环绕到此单元格之前，不会搜索 <paramref name="after" /> 指定的单元格。 如果未指定此参数，则搜索从区域左上角的单元格之后开始。</param>
        <summary>继续以 方法开始的 <see cref="M:Microsoft.Office.Interop.Excel.Range.Find(System.Object,System.Object,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSearchDirection,System.Object,System.Object,System.Object)" /> 搜索。</summary>
        <returns>To be added.</returns>
        <remarks><para>查找匹配这些相同条件的下一个单元格，并返回 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 一个代表该单元格的对象。</para>
          <para>此方法不影响选定内容或活动单元格。</para>
          <para>当查找到指定查找区域的末尾时，本方法将环绕至区域的开始继续搜索。发生环绕后，为停止查找，可保存第一次找到的单元格地址，然后测试下一个查找到的单元格地址是否与其相同。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FindPrevious">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range FindPrevious (object After);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range FindPrevious([in]object After) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.FindPrevious(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindPrevious (Optional After As Object) As Range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(400)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="After" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="After">可选 <b>对象</b>。 指定一个单元格，查找将从该单元格之前开始。 此单元格对应于从用户界面搜索时的活动单元格的位置。 请注意 <paramref name="After" /> ，必须是范围中的单个单元格。 请记住，搜索从该单元格开始;在方法环绕到此单元格之前，不会搜索 <paramref name="before" /> 指定的单元格。 如果未指定此参数，则搜索从区域左上角单元格之前开始。</param>
        <summary>继续以 方法开始的 <see cref="M:Microsoft.Office.Interop.Excel.Range.Find(System.Object,System.Object,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSearchDirection,System.Object,System.Object,System.Object)" /> 搜索。</summary>
        <returns>To be added.</returns>
        <remarks><para>查找匹配这些相同条件的上一个单元格并返回 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 一个代表该单元格的对象。</para>
          <para>此方法不影响选定内容或活动单元格。</para>
          <para>当查找到指定查找区域的起始位置时，本方法将环绕至区域的末尾继续搜索。发生绕回后，要停止搜索，可保存第一个找到的单元格地址，然后测试后面找到的每个单元格地址是否与其相同。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FlashFill">
      <MemberSignature Language="C#" Value="public void FlashFill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FlashFill() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.FlashFill" />
      <MemberSignature Language="VB.NET" Value="Public Sub FlashFill ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FlashFill();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2996)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果为 TRUE，Excel快速填充功能已启用且处于活动状态。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Font Font { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Font Font" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Font" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Font ^ Font { Microsoft::Office::Interop::Excel::Font ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(146)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(146)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Font" /> 一个对象，该对象代表指定对象的字体。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatConditions">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.FormatConditions FormatConditions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.FormatConditions FormatConditions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.FormatConditions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FormatConditions As FormatConditions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::FormatConditions ^ FormatConditions { Microsoft::Office::Interop::Excel::FormatConditions ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1392)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1392)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.FormatConditions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.FormatConditions" /> 一个集合，该集合代表指定区域的所有条件格式。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Formula">
      <MemberSignature Language="C#" Value="public object Formula { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Formula" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Formula" />
      <MemberSignature Language="VB.NET" Value="Public Property Formula As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Formula { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(261)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(261)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(261)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置 A1 样式表示法和宏语言中的对象的公式。</summary>
        <value>To be added.</value>
        <remarks><para>此属性对于 OLAP 数据源无效。</para>
          <para>如果单元格包含一个常量，此属性返回该常量。如果单元格为空，此 <b>Formula</b> 属性返回一个空字符串。如果单元格包含公式，<b>Formula</b> 属性将该公式作为字符串返回，所用格式与在编辑栏（包括等号）中显示时的格式相同。</para>
          <para>如果将单元格的值或者公式设置为日期类型，则 Microsoft Excel 将检查此单元格的数字格式是否符合日期或者时间格式。如果不符合，Microsoft Excel 将把数字格式设置为默认的短日期格式。</para>
          <para>如果区域是一维或二维区域，可以将公式设置为相同维度的数组。 同样，可以将公式放入 Basic 数组中。</para>
          <para>如果为多单元格区域设置公式，则会用公式填充该区域所有的单元格。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaArray">
      <MemberSignature Language="C#" Value="public object FormulaArray { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormulaArray" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.FormulaArray" />
      <MemberSignature Language="VB.NET" Value="Public Property FormulaArray As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ FormulaArray { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(586)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(586)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(586)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置区域的数组公式。</summary>
        <value>To be added.</value>
        <remarks><para>此属性返回 (或可以设置为) 公式或数组。</para>
          <para>如果指定的区域不包含数组公式，则此属性返回 <b>Null</b>。</para>
          <para>如果使用此属性输入数组公式，则公式必须使用 R1C1 引用样式，而不是 A1 引用样式 (请参阅第二个示例) 。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaHidden">
      <MemberSignature Language="C#" Value="public object FormulaHidden { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormulaHidden" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.FormulaHidden" />
      <MemberSignature Language="VB.NET" Value="Public Property FormulaHidden As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ FormulaHidden { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(262)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(262)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(262)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定工作表受保护时是否隐藏公式。</summary>
        <value>To be added.</value>
        <remarks><para>如果工作表受保护时将隐藏公式，则此属性返回<b>True。</b> 如果指定<b>区域</b>包含一些<b>FormulaHidden</b>等于<b>True</b>的单元格和一些<b>FormulaHidden</b>等于 False 的单元格，则返回<b>Null。</b></para>
          <para>请勿将此属性与 属性 <see cref="P:Microsoft.Office.Interop.Excel.Range.Hidden" /> 混淆。 如果工作簿受保护且工作表不受保护，则公式不会隐藏，而仅在工作表受保护时隐藏。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaLabel">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlFormulaLabel FormulaLabel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlFormulaLabel FormulaLabel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.FormulaLabel" />
      <MemberSignature Language="VB.NET" Value="Public Property FormulaLabel As XlFormulaLabel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlFormulaLabel FormulaLabel { Microsoft::Office::Interop::Excel::XlFormulaLabel get(); void set(Microsoft::Office::Interop::Excel::XlFormulaLabel value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1380)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1380)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1380)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlFormulaLabel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置指定范围的公式标签类型。</summary>
        <value>To be added.</value>
        <remarks><para>如果区域不包含标签，则此属性的返回值可以是 <b>xlNone，</b> 或者以下 <b>XlFormulaLabel</b> 常量之一：</para>
          <list type="bullet">
            <item>
              <description>
                <b>xlColumnLabels</b>
              </description>
            </item>
            <item>
              <description>
                <b>xlMixedLabels</b>
              </description>
            </item>
            <item>
              <description>
                <b>xlNoLabels</b>
              </description>
            </item>
            <item>
              <description>
                <b>xlRowLabels</b>
              </description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaLocal">
      <MemberSignature Language="C#" Value="public object FormulaLocal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormulaLocal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.FormulaLocal" />
      <MemberSignature Language="VB.NET" Value="Public Property FormulaLocal As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ FormulaLocal { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(263)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(263)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(263)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置对象，在语言中的用户使用 A1-样式引用的公式。</summary>
        <value>To be added.</value>
        <remarks><para>如果指定单元格包含常量，此属性返回的就是该常量。如果单元格为空，此属性返回一个空字符串。如果单元格包含公式，此属性将该公式作为字符串返回，所用格式与在编辑栏（包括等号）中显示时的格式相同。</para>
          <para>如果将单元格的格式的值或公式设为日期类型，Microsoft Excel 将检查该单元格的格式是否符合某个日期或时间数组格式，如果不符合，将采用默认的短日期数字格式。</para>
          <para>如果区域是一维或二维区域，可以将公式设置为相同维度的数组。 同样，可以将公式放入数组中。</para>
          <para>对多重单元格区域设置公式，则该区域中所有单元格都用此公式填充。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaR1C1">
      <MemberSignature Language="C#" Value="public object FormulaR1C1 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormulaR1C1" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.FormulaR1C1" />
      <MemberSignature Language="VB.NET" Value="Public Property FormulaR1C1 As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ FormulaR1C1 { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(264)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(264)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(264)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用采用宏语言的 R1C1 表示法，返回或设置对象的公式。</summary>
        <value>To be added.</value>
        <remarks><para>如果单元格包含一个常量，此属性返回该常量。如果单元格为空，此属性返回一个空字符串。如果单元格包含公式，此属性将该公式作为字符串返回，所使用的格式与在公式栏中显示的格式相同（包括等号）。</para>
          <para>如果将单元格的格式的值或公式设为日期类型，Microsoft Excel 将检查该单元格的格式是否符合某个日期或时间数组格式，如果不符合，将采用默认的短日期数字格式。</para>
          <para>如果区域是一维或二维区域，可以将公式设置为相同维度的数组。 同样，可以将公式放入数组中。</para>
          <para>对多重单元格区域设置公式，则该区域中所有单元格都用此公式填充。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FormulaR1C1Local">
      <MemberSignature Language="C#" Value="public object FormulaR1C1Local { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormulaR1C1Local" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.FormulaR1C1Local" />
      <MemberSignature Language="VB.NET" Value="Public Property FormulaR1C1Local As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ FormulaR1C1Local { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(265)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(265)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(265)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置对象，使用的用户语言的 R1C1 样式表示法表示的公式。</summary>
        <value>To be added.</value>
        <remarks><para>如果指定单元格包含常量，此属性返回的就是该常量。如果单元格为空，此属性返回一个空字符串。如果单元格包含公式，此属性将该公式作为字符串返回，所用格式与在编辑栏（包括等号）中显示时的格式相同。</para>
          <para>如果将单元格的格式的值或公式设为日期类型，Microsoft Excel 将检查该单元格的格式是否符合某个日期或时间数组格式，如果不符合，将采用默认的短日期数字格式。</para>
          <para>如果区域是一维或二维区域，可以将公式设置为相同维度的数组。 同样，可以将公式放入数组中。</para>
          <para>对多重单元格区域设置公式，则该区域中所有单元格都用此公式填充。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionWizard">
      <MemberSignature Language="C#" Value="public object FunctionWizard ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FunctionWizard() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.FunctionWizard" />
      <MemberSignature Language="VB.NET" Value="Public Function FunctionWizard () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FunctionWizard();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(571)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>对指定区域左上角单元格启动“函数向导”。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-4)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoalSeek">
      <MemberSignature Language="C#" Value="public bool GoalSeek (object Goal, Microsoft.Office.Interop.Excel.Range ChangingCell);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GoalSeek([in]object Goal, [in]class Microsoft.Office.Interop.Excel.Range ChangingCell) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.GoalSeek(System.Object,Microsoft.Office.Interop.Excel.Range)" />
      <MemberSignature Language="VB.NET" Value="Public Function GoalSeek (Goal As Object, ChangingCell As Range) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GoalSeek(System::Object ^ Goal, Microsoft::Office::Interop::Excel::Range ^ ChangingCell);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(472)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Goal" Type="System.Object" />
        <Parameter Name="ChangingCell" Type="Microsoft.Office.Interop.Excel.Range" />
      </Parameters>
      <Docs>
        <param name="Goal">必需的 <b>对象</b>。 希望在该单元格中返回的结果。</param>
        <param name="ChangingCell">必需 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 。 指定为获得目标值而应更改的单元格。</param>
        <summary>为得出特定结果而进行单变量求解。</summary>
        <returns>To be added.</returns>
        <remarks><para>如果此特定结果是由某公式返回的量，本方法将求出该公式中未知数的值，当用该值代换公式中的未知数时，该公式将得出所需的特定结果。</para>
          <para>如果目标查找成功，此方法将返回<b>True。</b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public object Group (object Start, object End, object By, object Periods);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Group([in]object Start, [in]object End, [in]object By, [in]object Periods) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Group(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Group (Optional Start As Object, Optional End As Object, Optional By As Object, Optional Periods As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(46)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Object" />
        <Parameter Name="End" Type="System.Object" />
        <Parameter Name="By" Type="System.Object" />
        <Parameter Name="Periods" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Start">可选 <b>对象</b>。 要分组的第一个值。 如果该参数被省略或为 <b>True</b>，则使用字段中的第一个值。</param>
        <param name="End">可选 <b>对象</b>。 要分组的最后一个值。 如果该参数被省略或为 <b>True</b>，则使用字段中的最后一个值。</param>
        <param name="By">可选 <b>对象</b>。 如果字段为数字，则该参数指定每个组的大小。 如果字段是日期，则当数组中的元素 4 为 True 且所有其他元素为 False 时，此参数指定每个组的 <paramref name="Periods" /> <b>天数</b>。 <b></b> 否则，忽略该参数。 如果省略此参数，Microsoft Excel 将自动选择一个默认的组大小。</param>
        <param name="Periods">可选 <b>对象</b>。 指定组的时间段的布尔值数组，如下表所示。如果数组中的元素为 <b>True，</b>则为相应的时间创建组;如果 元素为 <b>False</b>，则不创建任何组。 当字段不是日期字段时，该参数被忽略。</param>
        <summary>当对象代表数据透视表字段的数据范围中的单个单元格时，Group 方法在该字段中执行基于数字或 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 日期的分组。 <b></b></summary>
        <returns>To be added.</returns>
        <remarks><para><b>Range</b> 对象必须是数据透视表字段的数据区域中的单个单元格。 如果您尝试将此方法应用于多个单元格，它将失败，但不会显示错误消息。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HasArray">
      <MemberSignature Language="C#" Value="public object HasArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object HasArray" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.HasArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasArray As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ HasArray { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(266)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(266)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定指定的单元格是否属于数组公式。</summary>
        <value>To be added.</value>
        <remarks><para>如果 <b>指定的单元格</b> 是数组公式的一部分，则此属性返回 True。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HasFormula">
      <MemberSignature Language="C#" Value="public object HasFormula { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object HasFormula" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.HasFormula" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasFormula As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ HasFormula { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(267)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(267)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定区域内的所有单元格是否都包含公式。</summary>
        <value>To be added.</value>
        <remarks><para>如果区域内的所有单元格均包含公式，则此属性返回<b>True;</b>如果区域中没有单元格包含公式，则返回<b>False;</b>否则返回<b>Null。</b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public object Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Height" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Height" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Height As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Height { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(123)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(123)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>区域的高度。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hidden">
      <MemberSignature Language="C#" Value="public object Hidden { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Hidden" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Hidden" />
      <MemberSignature Language="VB.NET" Value="Public Property Hidden As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Hidden { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(268)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(268)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(268)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定是否隐藏行或列。</summary>
        <value>To be added.</value>
        <remarks><para>如果隐藏行或列，则此属性返回<b>True。</b> 指定的区域必须占据整个行或整个列。</para>
          <para>请勿将此属性与 属性 <see cref="P:Microsoft.Office.Interop.Excel.Range.FormulaHidden" /> 混淆。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignment">
      <MemberSignature Language="C#" Value="public object HorizontalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object HorizontalAlignment" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.HorizontalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalAlignment As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ HorizontalAlignment { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(136)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(136)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(136)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置指定对象的水平对齐方式。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hyperlinks">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Hyperlinks Hyperlinks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Hyperlinks Hyperlinks" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Hyperlinks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hyperlinks As Hyperlinks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Hyperlinks ^ Hyperlinks { Microsoft::Office::Interop::Excel::Hyperlinks ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1393)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1393)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Hyperlinks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Hyperlinks" /> 一个集合，该集合代表该范围的超链接。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.ID" />
      <MemberSignature Language="VB.NET" Value="Public Property ID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ID { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1813)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1813)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1813)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置指定单元格的标识标签，当页面另存为网页时。</summary>
        <value>To be added.</value>
        <remarks><para>可将 ID 标签用作其他 HTML 文档或相同网页上的超链接引用。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="IndentLevel">
      <MemberSignature Language="C#" Value="public object IndentLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object IndentLevel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.IndentLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property IndentLevel As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ IndentLevel { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(201)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(201)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(201)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置单元格或范围的缩进级别。</summary>
        <value>To be added.</value>
        <remarks><para>缩进级别可以是 0 到 15 之间的整数。</para>
          <para>使用此属性将缩进量设为小于 0 或者大于 15 的数字，将导致发生错误。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public object Insert (object Shift, object CopyOrigin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Insert([in]object Shift, [in]object CopyOrigin) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Insert(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (Optional Shift As Object, Optional CopyOrigin As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(252)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Shift" Type="System.Object" />
        <Parameter Name="CopyOrigin" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Shift">可选 <b>对象</b>。 指定移动单元格的方式。 可以是下列常量之一 <see cref="T:Microsoft.Office.Interop.Excel.XlInsertShiftDirection" /> <b>：xlShiftToRight</b> 或 <b>xlShiftDown</b>。 如果省略此参数，Microsoft Excel 将根据区域的形状确定调整方式。</param>
        <param name="CopyOrigin">可选 <b>对象</b>。 复制的起点。</param>
        <summary>在工作表或宏表中插入一个单元格或单元格区域，其他单元格相应移位以腾出空间。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertIndent">
      <MemberSignature Language="C#" Value="public void InsertIndent (int InsertAmount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertIndent([in]int32 InsertAmount) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.InsertIndent(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertIndent (InsertAmount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertIndent(int InsertAmount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1381)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InsertAmount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="InsertAmount">必需<b>类型，类型为 Integer。</b> 要添加到当前缩进量的缩进量。</param>
        <summary>向指定的区域添加缩进量。</summary>
        <remarks><para>如果用本方法将缩进量设置为一个小于 0（零）或大于 15 的值，将出错。</para>
          <para>使用 <b /> <see cref="P:Microsoft.Office.Interop.Excel.Range.IndentLevel" /> 属性可返回范围的缩进级别。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Interior">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Interior Interior { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Interior Interior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Interior" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Interior As Interior" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Interior ^ Interior { Microsoft::Office::Interop::Excel::Interior ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(129)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(129)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Interior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Interior" /> 一个对象，该对象代表指定对象的内部。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object Item[object RowIndex, object ColumnIndex] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object, object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Item(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Property Item(RowIndex As Object, Optional ColumnIndex As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Item[System::Object ^, System::Object ^] { System::Object ^ get(System::Object ^ RowIndex, System::Object ^ ColumnIndex); void set(System::Object ^ RowIndex, System::Object ^ ColumnIndex, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(170)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(170)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(170)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowIndex" Type="System.Object" />
        <Parameter Name="ColumnIndex" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowIndex">必需的 <b>对象</b>。 要访问的单元格的索引号，顺序为从左到右，然后往下。 Range.Item (1) 返回区域左上角的单元格;Range.Item (2) 返回紧接左上角单元格右边的单元格。</param>
        <param name="ColumnIndex">可选 <b>对象</b>。 指明要访问的单元格所在列的列号的数字或字符串，1 或 “A”表示区域中的第一列。</param>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 一个对象，该对象代表与指定区域偏移量为一定距离的范围。</summary>
        <value>To be added.</value>
        <remarks><para>和 <paramref name="RowIndex" /> <paramref name="ColumnIndex" /> 参数是相对偏移量。 换句话说，指定 1 将返回区域第一行（而不是工作表的第一行） <paramref name="RowIndex" /> 中的单元格。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Justify">
      <MemberSignature Language="C#" Value="public object Justify ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Justify() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Justify" />
      <MemberSignature Language="VB.NET" Value="Public Function Justify () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Justify();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(495)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>调整区域内的文字，使之均衡地填充该区域。</summary>
        <returns>To be added.</returns>
        <remarks><para>如果区域不够大，Microsoft Excel 将显示一个消息，通知您文本将延伸到区域的下方。 如果单击“确定”按钮，被调整的文本将替换超出选定区域的单元格的内容。 若要阻止显示此消息，将 <see cref="P:Microsoft.Office.Interop.Excel._Application.DisplayAlerts" /> 属性设置为 <b>False</b>。 设置该属性后，文本将始终替换区域下方单元格的内容。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public object Left { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Left" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Left" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Left As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Left { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(127)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(127)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>从 A 列的左边缘到区域左边缘的距离。</summary>
        <value>To be added.</value>
        <remarks><para>如果该区域不连续，则使用第一块区域。如果该区域有若干列宽，则使用区域中最左边的列。</para>
          <para>如果窗口最大化，则此属性返回一个负数，该负数因窗口边框的宽度而异。 如果将此属性设置为 0 (零) 则会使窗口在应用程序窗口最大化时略小一些。 换句话说，如果此属性为 0 (零) ，则主 Microsoft Excel 窗口的左边框将在屏幕上几乎不可见。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ListHeaderRows">
      <MemberSignature Language="C#" Value="public int ListHeaderRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ListHeaderRows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.ListHeaderRows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ListHeaderRows As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ListHeaderRows { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1187)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1187)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回指定区域中标题行的数目。</summary>
        <value>To be added.</value>
        <remarks><para>使用此属性之前，请使用 <see cref="P:Microsoft.Office.Interop.Excel.Range.CurrentRegion" /> 属性查找区域的边界。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ListNames">
      <MemberSignature Language="C#" Value="public object ListNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ListNames() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ListNames" />
      <MemberSignature Language="VB.NET" Value="Public Function ListNames () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ListNames();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(253)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从区域的第一个单元格开始，将所有显示的名称的列表粘贴到工作表上。</summary>
        <returns>To be added.</returns>
        <remarks><para>使用 <see cref="P:Microsoft.Office.Interop.Excel._Application.Names" /> 属性可返回工作表上所有名称的集合。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ListObject">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.ListObject ListObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.ListObject ListObject" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.ListObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ListObject As ListObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::ListObject ^ ListObject { Microsoft::Office::Interop::Excel::ListObject ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2257)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2257)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.ListObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.ListObject" /> 对象或 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 对象 <see cref="T:Microsoft.Office.Interop.Excel.QueryTable" /> 的对象。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationInTable">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlLocationInTable LocationInTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlLocationInTable LocationInTable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.LocationInTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocationInTable As XlLocationInTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlLocationInTable LocationInTable { Microsoft::Office::Interop::Excel::XlLocationInTable get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(691)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(691)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlLocationInTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回一个常量，该常量描述包含指定区域左上角 <see cref="T:Microsoft.Office.Interop.Excel.PivotTable" /> 的报表部分。</summary>
        <value>To be added.</value>
        <remarks><para>
            <b>XlLocationInTable</b> 可以是下列常量之 <see cref="T:Microsoft.Office.Interop.Excel.XlLocationInTable" /> 一：</para>
          <list type="bullet">
            <item>
              <description>
                <b>xlRowHeader</b>
              </description>
            </item>
            <item>
              <description>
                <b>xlColumnHeader</b>
              </description>
            </item>
            <item>
              <description>
                <b>xlPageHeader</b>
              </description>
            </item>
            <item>
              <description>
                <b>xlDataHeader</b>
              </description>
            </item>
            <item>
              <description>
                <b>xlRowItem</b>
              </description>
            </item>
            <item>
              <description>
                <b>xlColumnItem</b>
              </description>
            </item>
            <item>
              <description>
                <b>xlPageItem</b>
              </description>
            </item>
            <item>
              <description>
                <b>xlDataItem</b>
              </description>
            </item>
            <item>
              <description>
                <b>xlTableBody</b>
              </description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Locked">
      <MemberSignature Language="C#" Value="public object Locked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Locked" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Locked" />
      <MemberSignature Language="VB.NET" Value="Public Property Locked As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Locked { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(269)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(269)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(269)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定对象是否被锁定。</summary>
        <value>To be added.</value>
        <remarks><para>如果对象已锁定，则此属性返回<b>True;</b>如果工作表受保护时可以修改该对象，则返回<b>False;</b>如果指定区域同时包含锁定单元格和未锁定单元格，则返回<b>Null。</b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MDX">
      <MemberSignature Language="C#" Value="public string MDX { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MDX" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.MDX" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MDX As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MDX { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2123)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2123)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回指定对象的 MDX <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 名称。 只读。</summary>
        <value>字符串</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (object Across);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Merge([in]object Across) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Merge(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (Optional Across As Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(564)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Across" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Across">可选 <b>对象</b>。 如果设置为 <b>True</b>，则将指定区域中每一行的单元格合并为一个单独的合并单元格。 默认值为 <b>False</b>。</param>
        <summary>从指定对象创建合并 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 的单元格。</summary>
        <remarks><para>合并区域的值在该区域左上角的单元格中指定。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeArea">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range MergeArea { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range MergeArea" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.MergeArea" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MergeArea As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ MergeArea { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1385)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1385)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 一个对象，该对象代表包含指定单元格的合并区域。</summary>
        <value>To be added.</value>
        <remarks><para>如果指定的单元格不在合并区域，则此属性返回指定的单元格。</para>
          <para><b>MergeArea</b> 属性只应用于单个单元格区域。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeCells">
      <MemberSignature Language="C#" Value="public object MergeCells { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object MergeCells" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.MergeCells" />
      <MemberSignature Language="VB.NET" Value="Public Property MergeCells As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ MergeCells { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(208)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(208)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(208)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定区域或样式是否包含合并单元格。</summary>
        <value>To be added.</value>
        <remarks><para>如果区域或样式包含合并单元格，则此属性返回<b>True。</b></para>
          <para>如果选择的区域内包含合并单元格，生成的选定内容可能与预期不同。 使用 <see cref="P:Microsoft.Office.Interop.Excel.Range.Address(System.Object,System.Object,Microsoft.Office.Interop.Excel.XlReferenceStyle,System.Object,System.Object)" /> 属性检查选定区域的地址。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public object Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Name { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(110)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(110)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(110)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置对象的名称。</summary>
        <value>To be added.</value>
        <remarks><para><b>Range</b>对象的名称是 <see cref="T:Microsoft.Office.Interop.Excel.Name" /> 对象。 对于每种类型的对象，名称都是 <b>String</b>。</para>
          <para>下表列出了 <b>Name</b> 属性和相关属性的示例值，同时假设有一个具有唯一名称“[Europe].[France].[Paris]”的 OLAP 数据源，还有一个包含项名称“Paris”的非 OLAP 数据源。</para>
          <list type="table">
            <item>
              <term>Caption</term>
              <description>巴黎</description>
              <description>巴黎</description>
            </item>
            <item>
              <term>名称</term>
              <description>[Europe].[France].[Paris]（只读）</description>
              <description>巴黎</description>
            </item>
            <item>
              <term>SourceName</term>
              <description>[Europe].[France].[Paris]（只读）</description>
              <description>（与 SQL 属性值相同，只读）</description>
            </item>
            <item>
              <term>值</term>
              <description>[Europe].[France].[Paris]（只读）</description>
              <description>巴黎</description>
            </item>
          </list>
          <para>在集合中指定索引 <see cref="T:Microsoft.Office.Interop.Excel.PivotItems" /> 时，可以使用下表中所示的语法。</para>
          <list type="table">
            <item>
              <term>表达式。PivotItems ("[Europe]。[法国]。[Paris]") </term>
              <description>表达式。PivotItems ("Paris") </description>
            </item>
          </list>
          <para>使用 属性引用集合的特定成员时，可以使用文本索引名称 <see cref="M:Microsoft.Office.Interop.Excel.PivotItems.Item(System.Object)" /> ，如下表所示。</para>
          <list type="table">
            <item>
              <term>[欧洲]。[法国]。[Paris]</term>
              <description>巴黎</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NavigateArrow">
      <MemberSignature Language="C#" Value="public object NavigateArrow (object TowardPrecedent, object ArrowNumber, object LinkNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object NavigateArrow([in]object TowardPrecedent, [in]object ArrowNumber, [in]object LinkNumber) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.NavigateArrow(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NavigateArrow (Optional TowardPrecedent As Object, Optional ArrowNumber As Object, Optional LinkNumber As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1032)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TowardPrecedent" Type="System.Object" />
        <Parameter Name="ArrowNumber" Type="System.Object" />
        <Parameter Name="LinkNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="TowardPrecedent">可选 <b>对象</b>。 指定导航方向： <b>如果为 True，</b> 则导航到引用单元格; <b>如果为 False，</b> 则向从属方向导航。</param>
        <param name="ArrowNumber">可选 <b>对象</b>。 指定要定位的箭头编号；对应于单元格公式中编号的引用。</param>
        <param name="LinkNumber">可选 <b>对象</b>。 如果箭头是外部引用箭头，则该参数表示要跟踪的外部引用。 如果省略该参数，则跟踪第一个外部引用。</param>
        <summary>定位追踪箭头，此箭头指定引用单元格、从属单元格或错误源单元格。</summary>
        <returns>To be added.</returns>
        <remarks><para>选择引用单元格、从属单元格或错误单元格，并返回 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 一个代表新选定内容的对象。 本方法应用于没有可见追踪箭头的单元格时将出错。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Next { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Next" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Next" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Next As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ Next { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(502)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(502)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回一 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 个代表下一个单元格的对象。</summary>
        <value>To be added.</value>
        <remarks><para>此属性模拟 TAB 键，尽管该属性返回下一个单元格而不选择它。</para>
          <para>在处于保护状态的工作表中，此属性返回下一个未锁定单元格。在未保护的工作表中，此属性总是返回紧靠指定单元格右边的单元格。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NoteText">
      <MemberSignature Language="C#" Value="public string NoteText (object Text, object Start, object Length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string NoteText([in]object Text, [in]object Start, [in]object Length) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.NoteText(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function NoteText (Optional Text As Object, Optional Start As Object, Optional Length As Object) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1127)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Text" Type="System.Object" />
        <Parameter Name="Start" Type="System.Object" />
        <Parameter Name="Length" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Text">可选 <b>对象</b>。 要添加到注释中的文本（不超过 255 个字符）。 从位置开始插入文本 <paramref name="Start" /> ，替换 <paramref name="Length" /> 现有便笺的字符。 如果省略此参数，此方法将返回从位置 开始为 字符的注释 <paramref name="Start" /> 的当前 <paramref name="Length" /> 文本。</param>
        <param name="Start">可选 <b>对象</b>。 设置或返回的文本的起始位置。 如果省略该参数，此方法将第一个字符作为起始位置。 要将文本追加到注释，请指定一个大于现有注释中的字符数的数字。</param>
        <param name="Length">可选 <b>对象</b>。 要设置或返回的字符数。 如果省略该参数，则 Microsoft Excel 将以从现有注释起始位置到注释末尾的长度设置或返回字符（不超过 255 个字符）。 如果注释结尾的字符数超过 255 个，则此方法仅返回 <paramref name="Start" /> 255 个字符。</param>
        <summary>返回或设置与区域左上角单元格相关联的单元格注释。</summary>
        <returns>To be added.</returns>
        <remarks><para>单元格注释已经替换为区域注释。 有关详细信息，请参阅 <see cref="T:Microsoft.Office.Interop.Excel.Comment" /> 对象。</para>
          <para>若要添加超过 255 个字符的注释，请先使用此方法指定前 255 个字符，然后再用它为注释追加其余部分（一次不超过 255 个字符）。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public object NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NumberFormat" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberFormat As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NumberFormat { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(193)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(193)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(193)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置对象的格式代码。</summary>
        <value>To be added.</value>
        <remarks><para>如果指定区域中的所有单元格的数字格式不一致，则此属性将返回 <b>Null</b>。</para>
          <para>格式代码是在 设置单元格格式对话框中 格式代码选项相同的字符串。 Format <b></b>函数使用的格式代码字符串与<b>NumberFormat 和属性使用</b>的格式代码 <see cref="P:Microsoft.Office.Interop.Excel.Range.NumberFormatLocal" /> 字符串不同。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberFormatLocal">
      <MemberSignature Language="C#" Value="public object NumberFormatLocal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NumberFormatLocal" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.NumberFormatLocal" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberFormatLocal As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NumberFormatLocal { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1097)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1097)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1097)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置对象的格式代码，以用户的语言的字符串形式。</summary>
        <value>To be added.</value>
        <remarks><para>Format <b></b>函数使用的格式代码字符串与 和 <see cref="P:Microsoft.Office.Interop.Excel.Range.NumberFormat" /> <b>NumberFormatLocal</b>属性使用的格式代码字符串不同。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Offset[object RowOffset, object ColumnOffset] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Offset(object, object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Offset(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset(Optional RowOffset As Object, Optional ColumnOffset As Object) As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ Offset[System::Object ^, System::Object ^] { Microsoft::Office::Interop::Excel::Range ^ get(System::Object ^ RowOffset, System::Object ^ ColumnOffset); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(254)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(254)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowOffset" Type="System.Object" />
        <Parameter Name="ColumnOffset" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowOffset">可选 <b>对象</b>。 区域偏移的行数（正值、负值或零 (0)。 正值表示向下偏移，负值表示向上偏移。 默认值为 0。</param>
        <param name="ColumnOffset">可选 <b>对象</b>。 区域偏移的列数（正值、负值或零 (0)。 正值表示向右偏移，负值表示向左偏移。 默认值为 0。</param>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 一个对象，该对象代表与指定区域偏移的范围。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Orientation">
      <MemberSignature Language="C#" Value="public object Orientation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Orientation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Orientation" />
      <MemberSignature Language="VB.NET" Value="Public Property Orientation As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Orientation { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(134)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(134)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(134)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回文本方向。</summary>
        <value>To be added.</value>
        <remarks><para>返回的方向值可以是 90 到 90 度范围内的整数值。</para>
          <para>对于 OLAP 数据源，当设置某一层中的一个字段的此属性值时，也会同时设置同一层中所有其他字段的方向。维字段只能在数据透视表的行、列和页字段区域中进行定向。度量字段则只能在数据区域中进行定向。将某一层或数据字段设置为 <b>xlHidden</b> 时，会将该层或字段从数据透视表中移出。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="OutlineLevel">
      <MemberSignature Language="C#" Value="public object OutlineLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OutlineLevel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.OutlineLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property OutlineLevel As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ OutlineLevel { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(271)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(271)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(271)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置指定行或列的当前分级显示级别。</summary>
        <value>To be added.</value>
        <remarks><para>第一级为最外层的摘要级。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PageBreak">
      <MemberSignature Language="C#" Value="public int PageBreak { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PageBreak" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.PageBreak" />
      <MemberSignature Language="VB.NET" Value="Public Property PageBreak As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PageBreak { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(255)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(255)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(255)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置分页符的位置。</summary>
        <value>To be added.</value>
        <remarks><para>返回值可以是下列常量之 <see cref="T:Microsoft.Office.Interop.Excel.XlPageBreak" /> <b /> 一：</para>
          <list type="bullet">
            <item>
              <description>
                <b>xlPageBreakAutomatic</b>
              </description>
            </item>
            <item>
              <description>
                <b>xlPageBreakManual</b>
              </description>
            </item>
            <item>
              <description>
                <b>xlPageBreakNone</b>
              </description>
            </item>
          </list>
          <para>此属性可以返回自动或手动分页符的位置，但它只能设置手动分页符的位置 (它只能设置为 <b>xlPageBreakManual</b> 或 <b>xlPageBreakNone</b>) 。</para>
          <para>要清除工作表的所有手动分页符，请将 Cells.PageBreak 设置为 <b>xlPageBreakNone</b>。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回指定对象的父对象。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public object Parse (object ParseLine, object Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Parse([in]object ParseLine, [in]object Destination) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Parse(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Parse (Optional ParseLine As Object, Optional Destination As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(477)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ParseLine" Type="System.Object" />
        <Parameter Name="Destination" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ParseLine">可选 <b>对象</b>。 一个包含左括号和右方括号的字符串，用于指示应在何处拆分单元格。例如，"[xxx][xxx]"将前三个字符插入目标区域的第一列中，并将后三个字符插入第二列中。如果省略该参数，Microsoft Excel根据区域左上单元格的间距来猜测拆分列位置。 如果要使用不同的区域来猜测分析行，请使用 <b>Range</b> 对象作为 <paramref name="ParseLine" /> 参数。 该区域必须为进行分列处理的单元格之一。 <paramref name="ParseLine" />参数不能超过 255 个字符，包括括号和空格。</param>
        <param name="Destination">可选 <b>对象</b>。 <see cref="T:Microsoft.Office.Interop.Excel.Range" />一个代表已分析数据的目标区域左上角的对象。 如果省略该参数，Microsoft Excel 将在原处进行分列。</param>
        <summary>分列区域内的数据并将这些数据分散放置于若干单元格中。</summary>
        <returns>To be added.</returns>
        <remarks><para>分发区域的内容以填充多个相邻的列。 范围不能超过一列宽。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PasteSpecial">
      <MemberSignature Language="C#" Value="public object PasteSpecial (Microsoft.Office.Interop.Excel.XlPasteType Paste = Microsoft.Office.Interop.Excel.XlPasteType.xlPasteAll, Microsoft.Office.Interop.Excel.XlPasteSpecialOperation Operation = Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationNone, object SkipBlanks, object Transpose);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object PasteSpecial([in]valuetype Microsoft.Office.Interop.Excel.XlPasteType Paste, [in]valuetype Microsoft.Office.Interop.Excel.XlPasteSpecialOperation Operation, [in]object SkipBlanks, [in]object Transpose) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.PasteSpecial(Microsoft.Office.Interop.Excel.XlPasteType,Microsoft.Office.Interop.Excel.XlPasteSpecialOperation,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PasteSpecial (Optional Paste As XlPasteType = Microsoft.Office.Interop.Excel.XlPasteType.xlPasteAll, Optional Operation As XlPasteSpecialOperation = Microsoft.Office.Interop.Excel.XlPasteSpecialOperation.xlPasteSpecialOperationNone, Optional SkipBlanks As Object, Optional Transpose As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1928)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Paste" Type="Microsoft.Office.Interop.Excel.XlPasteType" />
        <Parameter Name="Operation" Type="Microsoft.Office.Interop.Excel.XlPasteSpecialOperation" />
        <Parameter Name="SkipBlanks" Type="System.Object" />
        <Parameter Name="Transpose" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Paste">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlPasteType" /> 。 要粘贴的范围部分。 可以是以下 <b>XlPasteType</b> 常量之一<b>：xlPasteAll 默认</b><b>xlPasteAllExceptBorders</b><b>xlPasteColumnWidths</b><b>xlPasteComments</b><b>xlPasteFormats</b><b>xlPasteFormulas</b><b>xlPasteFormulasAndNumberFormats</b><b>xlPasteValidation</b><b>xlPasteValues</b><b>xlPasteValuesAndNumberFormats</b></param>
        <param name="Operation">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlPasteSpecialOperation" /> 。 粘贴操作。 可以是以下<b>XlPasteSpecialOperation</b>常量之一<b>：xlPasteSpecialOperationAdd</b><b>xlPasteSpecialOperationDivide</b><b>xlPasteSpecialOperationMultiply</b><b>xlPasteSpecialOperationNone</b> <paramref name="default" /> <b>xlPasteSpecialOperationSubtract</b></param>
        <param name="SkipBlanks">可选 <b>对象</b>。 <b>如果为 True，</b> 将剪贴板上的单元格区域内没有空白单元格粘贴到目标区域。 默认值为 <b>False</b>。</param>
        <param name="Transpose">可选 <b>对象</b>。 <b>如果为 True，</b> 则粘贴区域时转置行和列。 默认值为 <b>False</b>。</param>
        <summary>将剪 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 贴板中的 粘贴到指定区域。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Phonetic">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Phonetic Phonetic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Phonetic Phonetic" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Phonetic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Phonetic As Phonetic" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Phonetic ^ Phonetic { Microsoft::Office::Interop::Excel::Phonetic ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1391)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1391)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Phonetic</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Phonetic" /> 包含有关单元格中特定音节文本字符串的信息的对象。</summary>
        <value>To be added.</value>
        <remarks><para>该属性提供与 Microsoft Excel 的早期版本的兼容性。 您应该使用 <b>Phonetics</b> () （其中 index 是 phonetic 文本的索引号） <paramref name="index" /> 返回单个 <see cref="T:Microsoft.Office.Interop.Excel.Phonetic" /> 对象。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Phonetics">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Phonetics Phonetics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Phonetics Phonetics" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Phonetics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Phonetics As Phonetics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Phonetics ^ Phonetics { Microsoft::Office::Interop::Excel::Phonetics ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1811)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1811)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Phonetics</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Phonetics" /> 区域的集合。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotCell">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PivotCell PivotCell { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.PivotCell PivotCell" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.PivotCell" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PivotCell As PivotCell" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::PivotCell ^ PivotCell { Microsoft::Office::Interop::Excel::PivotCell ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2013)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2013)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PivotCell</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回一 <see cref="T:Microsoft.Office.Interop.Excel.PivotCell" /> 个对象，该对象代表数据透视表中的单元格。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotField">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PivotField PivotField { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.PivotField PivotField" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.PivotField" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PivotField As PivotField" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::PivotField ^ PivotField { Microsoft::Office::Interop::Excel::PivotField ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(731)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(731)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PivotField</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回一个对象，该对象代表包含指定区域左上角 <see cref="T:Microsoft.Office.Interop.Excel.PivotField" /> 的数据透视表字段。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotItem">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PivotItem PivotItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.PivotItem PivotItem" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.PivotItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PivotItem As PivotItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::PivotItem ^ PivotItem { Microsoft::Office::Interop::Excel::PivotItem ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(740)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(740)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PivotItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回一个对象，该对象代表包含指定区域左上角 <see cref="T:Microsoft.Office.Interop.Excel.PivotItem" /> 的数据透视表项。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PivotTable">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.PivotTable PivotTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.PivotTable PivotTable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.PivotTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PivotTable As PivotTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::PivotTable ^ PivotTable { Microsoft::Office::Interop::Excel::PivotTable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(716)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(716)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.PivotTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回一个对象，该对象代表包含指定区域左上角的数据透视表或与数据透视表数据透视图 <see cref="T:Microsoft.Office.Interop.Excel.PivotTable" /> 报表。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Precedents">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Precedents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Precedents" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Precedents" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Precedents As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ Precedents { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(544)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(544)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 一个对象，该对象代表单元格的所有引用单元格。</summary>
        <value>To be added.</value>
        <remarks><para>如果有多个引用单元格，则可以是一个多重选择（<b>Range</b> 对象的并集）。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PrefixCharacter">
      <MemberSignature Language="C#" Value="public object PrefixCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object PrefixCharacter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.PrefixCharacter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrefixCharacter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ PrefixCharacter { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(504)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回单元格的前缀字符。</summary>
        <value>To be added.</value>
        <remarks><para>如果属性为 False ，则对于文本标签，此前缀字符将为 ' <see cref="P:Microsoft.Office.Interop.Excel._Application.TransitionNavigKeys" /> 或为空。 <b></b> 如果 <b>TransitionNavigKeys</b> 属性为 <b>True</b>，则对于左对齐标签，该字符将是“'”，对于右对齐标签，是“"”，对于居中对齐标签，是“^”，对于重复标签，是“\”或空白。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Previous">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Previous { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Previous" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Previous" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Previous As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ Previous { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(503)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(503)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回一 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 个代表上一单元格的对象。</summary>
        <value>To be added.</value>
        <remarks><para>如果指定对象为区域，则此属性的作用是仿效 Shift+Tab；但此属性只是返回上一单元格，并不选定它。</para>
          <para>在保护工作表上，该属性返回上一个未锁定的单元格。在未保护的工作表上，该属性通常返回指定单元格左侧相邻的单元格。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintOut">
      <MemberSignature Language="C#" Value="public object PrintOut (object From, object To, object Copies, object Preview, object ActivePrinter, object PrintToFile, object Collate, object PrToFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object PrintOut([in]object From, [in]object To, [in]object Copies, [in]object Preview, [in]object ActivePrinter, [in]object PrintToFile, [in]object Collate, [in]object PrToFileName) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.PrintOut(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PrintOut (Optional From As Object, Optional To As Object, Optional Copies As Object, Optional Preview As Object, Optional ActivePrinter As Object, Optional PrintToFile As Object, Optional Collate As Object, Optional PrToFileName As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1772)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1088)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="From" Type="System.Object" />
        <Parameter Name="To" Type="System.Object" />
        <Parameter Name="Copies" Type="System.Object" />
        <Parameter Name="Preview" Type="System.Object" />
        <Parameter Name="ActivePrinter" Type="System.Object" />
        <Parameter Name="PrintToFile" Type="System.Object" />
        <Parameter Name="Collate" Type="System.Object" />
        <Parameter Name="PrToFileName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="From">可选 <b>对象</b>。 打印的开始页号。 如果省略此参数，则从起始位置开始打印。</param>
        <param name="To">可选 <b>对象</b>。 打印的终止页号。 如果省略此参数，则打印至最后一页。</param>
        <param name="Copies">可选 <b>对象</b>。 打印份数。 如果省略此参数，则只打印一份。</param>
        <param name="Preview">可选 <b>对象</b>。 <b>如果</b>为 True，Microsoft Excel打印对象之前调用打印预览;<b>假</b> (或省略) 立即打印对象。</param>
        <param name="ActivePrinter">可选 <b>对象</b>。 设置活动打印机的名称。</param>
        <param name="PrintToFile">可选 <b>对象</b>。 如果为 <b>True</b>，则打印到文件。 如果没有指定 <b>PrToFileName</b>，Microsoft Excel 将提示用户输入要使用的输出文件的文件名。</param>
        <param name="Collate">可选 <b>对象</b>。 如果为 <b>True</b>，则逐份打印多个副本。</param>
        <param name="PrToFileName">可选 <b>对象</b>。 如果 <b>PrintToFile</b> 设为 <b>True</b>，则该参数指定要打印到的文件名。</param>
        <summary>打印对象。</summary>
        <returns>To be added.</returns>
        <remarks><para>"页面"（在工作表或工作簿中为整体页面）的描述和引用打印 <paramref name="From" /> <paramref name="To" /> 的页面。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintOutEx">
      <MemberSignature Language="C#" Value="public object PrintOutEx (object From, object To, object Copies, object Preview, object ActivePrinter, object PrintToFile, object Collate, object PrToFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object PrintOutEx([in]object From, [in]object To, [in]object Copies, [in]object Preview, [in]object ActivePrinter, [in]object PrintToFile, [in]object Collate, [in]object PrToFileName) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.PrintOutEx(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PrintOutEx (Optional From As Object, Optional To As Object, Optional Copies As Object, Optional Preview As Object, Optional ActivePrinter As Object, Optional PrintToFile As Object, Optional Collate As Object, Optional PrToFileName As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2361)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="From" Type="System.Object" />
        <Parameter Name="To" Type="System.Object" />
        <Parameter Name="Copies" Type="System.Object" />
        <Parameter Name="Preview" Type="System.Object" />
        <Parameter Name="ActivePrinter" Type="System.Object" />
        <Parameter Name="PrintToFile" Type="System.Object" />
        <Parameter Name="Collate" Type="System.Object" />
        <Parameter Name="PrToFileName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="From">To be added.</param>
        <param name="To">To be added.</param>
        <param name="Copies">To be added.</param>
        <param name="Preview">To be added.</param>
        <param name="ActivePrinter">To be added.</param>
        <param name="PrintToFile">To be added.</param>
        <param name="Collate">To be added.</param>
        <param name="PrToFileName">To be added.</param>
        <summary>仅供内部使用。</summary>
        <returns>返回 <see cref="T:System.Object" /> 。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintPreview">
      <MemberSignature Language="C#" Value="public object PrintPreview (object EnableChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object PrintPreview([in]object EnableChanges) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.PrintPreview(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PrintPreview (Optional EnableChanges As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(281)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="EnableChanges" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="EnableChanges"><b>如果为 True，</b> 启用更改。</param>
        <summary>按对象打印后的外观效果显示对象的预览。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryTable">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.QueryTable QueryTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.QueryTable QueryTable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.QueryTable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueryTable As QueryTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::QueryTable ^ QueryTable { Microsoft::Office::Interop::Excel::QueryTable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1386)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1386)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.QueryTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.QueryTable" /> 一个对象，该对象代表与指定对象相交的查询 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 表。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Range[object Cell1, object Cell2] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Range(object, object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Range(System.Object,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ Range[System::Object ^, System::Object ^] { Microsoft::Office::Interop::Excel::Range ^ get(System::Object ^ Cell1, System::Object ^ Cell2); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(197)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(197)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cell1" Type="System.Object" />
        <Parameter Name="Cell2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Cell1">必需的 <b>对象</b>。 区域名称。 必须为采用宏语言的 A1 样式引用。 可包括区域操作符（冒号）、相交区域操作符（空格）或合并区域操作符（逗号）。 也可包括货币符号，但它们会被忽略掉。 您可以在区域中任一部分使用局部定义名称。 如果使用名称，则假定该名称使用的是宏语言。</param>
        <param name="Cell2">可选 <b>对象</b>。 区域左上角和右下角的单元格。 可以是一个包含单个单元格、整列或整行的 <b>Range</b> 对象，或者也可以是一个用宏语言为单个单元格命名的字符串。</param>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 一个对象，该对象代表单元格或单元格区域。</summary>
        <value>To be added.</value>
        <remarks><para>此属性相对于 <b>Range</b> 对象。 例如，如果所选内容是单元格 C3，则 Selection.Range ("B1") 返回单元格 D3，因为它相对于属性返回的 <b>Range</b> <see cref="P:Microsoft.Office.Interop.Excel._Application.Selection" /> 对象。 另一方面，ActiveSheet.Range ("B1") 总是返回单元格 B1。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadingOrder">
      <MemberSignature Language="C#" Value="public int ReadingOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadingOrder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.ReadingOrder" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadingOrder As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReadingOrder { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(975)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(975)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(975)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置指定对象的阅读次序。</summary>
        <value>To be added.</value>
        <remarks><para>返回值可以是下列常量之一 <b>：xlRTL</b> (从右到左 <b>) 、xlLTR</b> (从左到右) 或 <b>xlContext</b>。</para>
          <para>[!注释] 由于选择或安装的语言支持（例如美国英语）不同，有些常量可能无法使用。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDuplicates">
      <MemberSignature Language="C#" Value="public void RemoveDuplicates (object Columns, Microsoft.Office.Interop.Excel.XlYesNoGuess Header = Microsoft.Office.Interop.Excel.XlYesNoGuess.xlNo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveDuplicates([in]object Columns, [in]valuetype Microsoft.Office.Interop.Excel.XlYesNoGuess Header) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.RemoveDuplicates(System.Object,Microsoft.Office.Interop.Excel.XlYesNoGuess)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveDuplicates (Optional Columns As Object, Optional Header As XlYesNoGuess = Microsoft.Office.Interop.Excel.XlYesNoGuess.xlNo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2492)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Columns" Type="System.Object" />
        <Parameter Name="Header" Type="Microsoft.Office.Interop.Excel.XlYesNoGuess" />
      </Parameters>
      <Docs>
        <param name="Columns">可选 <b>对象</b> 包含重复信息的列的索引数组。  如果未传递任何内容，则假定所有列都包含重复的信息。</param>
        <param name="Header">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlYesNoGuess" /> 指定第一行是否包含标题信息。  <see cref="F:Microsoft.Office.Interop.Excel.XlYesNoGuess.xlNo" />是默认值;指定 <see cref="F:Microsoft.Office.Interop.Excel.XlYesNoGuess.xlGuess" /> 是否要Excel确定标头。</param>
        <summary>从值区域中删除重复的值。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveSubtotal">
      <MemberSignature Language="C#" Value="public object RemoveSubtotal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object RemoveSubtotal() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.RemoveSubtotal" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveSubtotal () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ RemoveSubtotal();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(883)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>删除列表中的分类汇总。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public bool Replace (object What, object Replacement, object LookAt, object SearchOrder, object MatchCase, object MatchByte, object SearchFormat, object ReplaceFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Replace([in]object What, [in]object Replacement, [in]object LookAt, [in]object SearchOrder, [in]object MatchCase, [in]object MatchByte, [in]object SearchFormat, [in]object ReplaceFormat) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Replace(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (What As Object, Replacement As Object, Optional LookAt As Object, Optional SearchOrder As Object, Optional MatchCase As Object, Optional MatchByte As Object, Optional SearchFormat As Object, Optional ReplaceFormat As Object) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(226)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="What" Type="System.Object" />
        <Parameter Name="Replacement" Type="System.Object" />
        <Parameter Name="LookAt" Type="System.Object" />
        <Parameter Name="SearchOrder" Type="System.Object" />
        <Parameter Name="MatchCase" Type="System.Object" />
        <Parameter Name="MatchByte" Type="System.Object" />
        <Parameter Name="SearchFormat" Type="System.Object" />
        <Parameter Name="ReplaceFormat" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="What">必需的 <b>对象</b>。 Microsoft Excel 要搜索的字符串。</param>
        <param name="Replacement">必需的 <b>对象</b>。 替换字符串。</param>
        <param name="LookAt">可选 <b>对象</b>。 可以是下列常量之一 <see cref="T:Microsoft.Office.Interop.Excel.XlLookAt" /> <b>：xlWhole 或</b> <b>xlPart</b>。</param>
        <param name="SearchOrder">可选 <b>对象</b>。 可以是下列常量之一 <see cref="T:Microsoft.Office.Interop.Excel.XlSearchOrder" /> <b>：xlByRows</b> 或 <b>xlByColumns</b>。</param>
        <param name="MatchCase">可选 <b>对象</b>。 如果为 <b>True</b>，则搜索区分大小写。</param>
        <param name="MatchByte">可选 <b>对象</b>。 只有在已选择或安装双字节语言支持时，才能使用此参数Microsoft Excel。 <b>如果为 True，</b> 双字节字符仅与双字节字符匹配; <b>如果为 False，</b> 使双字节字符与它们的单字节等效字符匹配。</param>
        <param name="SearchFormat">可选 <b>对象</b>。 该方法的搜索格式。</param>
        <param name="ReplaceFormat">可选 <b>对象</b>。 方法的替换格式。</param>
        <summary>返回 <b>Boolean</b>，它表示指定区域内单元格中的字符。</summary>
        <returns>To be added.</returns>
        <remarks><para>使用此方法不会更改所选内容或活动单元格。</para>
          <para>每次使用此方法时，将保存 、 和 <paramref name="LookAt" /> <paramref name="SearchOrder" /> <paramref name="MatchCase" /> <paramref name="MatchByte" /> 的设置。 如果在下次调用方法时不指定这些参数的值，则使用保存的值。 设置这些参数会更改“查找”对话框中的设置，更改“查找”对话框中的设置会更改省略参数时使用的已保存值。 为避免出现问题，请在每次使用此方法时显式设置这些参数。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Resize[object RowSize, object ColumnSize] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Resize(object, object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Resize(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Resize(Optional RowSize As Object, Optional ColumnSize As Object) As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ Resize[System::Object ^, System::Object ^] { Microsoft::Office::Interop::Excel::Range ^ get(System::Object ^ RowSize, System::Object ^ ColumnSize); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(256)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(256)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowSize" Type="System.Object" />
        <Parameter Name="ColumnSize" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowSize">可选 <b>对象</b>。 新区域中的行数。 如果省略此参数，则区域中的行数保持不变。</param>
        <param name="ColumnSize">可选 <b>对象</b>。 新区域中的列数。 如果省略此参数，则区域中的列数保持不变。</param>
        <summary>调整指定区域的大小。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Row">
      <MemberSignature Language="C#" Value="public int Row { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Row" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Row" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Row As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Row { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(257)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(257)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回区域中第一个区域的第一行的行号。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowDifferences">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range RowDifferences (object Comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range RowDifferences([in]object Comparison) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.RowDifferences(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RowDifferences (Comparison As Object) As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::Office::Interop::Excel::Range ^ RowDifferences(System::Object ^ Comparison);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(511)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Comparison" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Comparison">必需的 <b>对象</b>。 用于与指定区域进行比较的单个单元格。</param>
        <summary>返回一个对象，该对象表示其内容与每行中比较 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 单元格的内容不同的所有单元格。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowHeight">
      <MemberSignature Language="C#" Value="public object RowHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object RowHeight" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.RowHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property RowHeight As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ RowHeight { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(272)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(272)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(272)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>以磅为单位返回或设置指定区域中所有行的行高。</summary>
        <value>To be added.</value>
        <remarks><para>如果指定范围中的行高度不相同，则此属性返回<b>Null。</b></para>
          <para>对于单行，该 <see cref="P:Microsoft.Office.Interop.Excel.Range.Height" /> 属性的值等于 <b>RowHeight</b> 属性的值。 但是，您还可以使用 <b>Height</b> 属性返回单元格区域的总高度。</para>
          <para><b>RowHeight 和</b> <b>Height</b>之间的其他差异包括：</para>
          <list type="bullet">
            <item>
              <description>
                <b>Height</b> 为只读。</description>
            </item>
            <item>
              <description>如果返回多行 <b>的 RowHeight</b> 属性，则如果所有行的高度相同 (则获取每行的行高) 或 <b>Null</b> (如果行的高度不相同) 。 如果要返回几行的 <b>Height</b> 属性，将得到所有行高的总和。</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Rows">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range Rows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Range Rows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Rows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rows As Range" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Range ^ Rows { Microsoft::Office::Interop::Excel::Range ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(258)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(258)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 一个对象，该对象代表指定范围中的行。</summary>
        <value>To be added.</value>
        <remarks><para>该属性在应用于是多个选定区域的 <b>Range</b> 对象时，只从该区域中第一个子区域内返回行。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public object Run (object Arg1, object Arg2, object Arg3, object Arg4, object Arg5, object Arg6, object Arg7, object Arg8, object Arg9, object Arg10, object Arg11, object Arg12, object Arg13, object Arg14, object Arg15, object Arg16, object Arg17, object Arg18, object Arg19, object Arg20, object Arg21, object Arg22, object Arg23, object Arg24, object Arg25, object Arg26, object Arg27, object Arg28, object Arg29, object Arg30);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Run([in]object Arg1, [in]object Arg2, [in]object Arg3, [in]object Arg4, [in]object Arg5, [in]object Arg6, [in]object Arg7, [in]object Arg8, [in]object Arg9, [in]object Arg10, [in]object Arg11, [in]object Arg12, [in]object Arg13, [in]object Arg14, [in]object Arg15, [in]object Arg16, [in]object Arg17, [in]object Arg18, [in]object Arg19, [in]object Arg20, [in]object Arg21, [in]object Arg22, [in]object Arg23, [in]object Arg24, [in]object Arg25, [in]object Arg26, [in]object Arg27, [in]object Arg28, [in]object Arg29, [in]object Arg30) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Run(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Run (Optional Arg1 As Object, Optional Arg2 As Object, Optional Arg3 As Object, Optional Arg4 As Object, Optional Arg5 As Object, Optional Arg6 As Object, Optional Arg7 As Object, Optional Arg8 As Object, Optional Arg9 As Object, Optional Arg10 As Object, Optional Arg11 As Object, Optional Arg12 As Object, Optional Arg13 As Object, Optional Arg14 As Object, Optional Arg15 As Object, Optional Arg16 As Object, Optional Arg17 As Object, Optional Arg18 As Object, Optional Arg19 As Object, Optional Arg20 As Object, Optional Arg21 As Object, Optional Arg22 As Object, Optional Arg23 As Object, Optional Arg24 As Object, Optional Arg25 As Object, Optional Arg26 As Object, Optional Arg27 As Object, Optional Arg28 As Object, Optional Arg29 As Object, Optional Arg30 As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(259)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Arg1" Type="System.Object" />
        <Parameter Name="Arg2" Type="System.Object" />
        <Parameter Name="Arg3" Type="System.Object" />
        <Parameter Name="Arg4" Type="System.Object" />
        <Parameter Name="Arg5" Type="System.Object" />
        <Parameter Name="Arg6" Type="System.Object" />
        <Parameter Name="Arg7" Type="System.Object" />
        <Parameter Name="Arg8" Type="System.Object" />
        <Parameter Name="Arg9" Type="System.Object" />
        <Parameter Name="Arg10" Type="System.Object" />
        <Parameter Name="Arg11" Type="System.Object" />
        <Parameter Name="Arg12" Type="System.Object" />
        <Parameter Name="Arg13" Type="System.Object" />
        <Parameter Name="Arg14" Type="System.Object" />
        <Parameter Name="Arg15" Type="System.Object" />
        <Parameter Name="Arg16" Type="System.Object" />
        <Parameter Name="Arg17" Type="System.Object" />
        <Parameter Name="Arg18" Type="System.Object" />
        <Parameter Name="Arg19" Type="System.Object" />
        <Parameter Name="Arg20" Type="System.Object" />
        <Parameter Name="Arg21" Type="System.Object" />
        <Parameter Name="Arg22" Type="System.Object" />
        <Parameter Name="Arg23" Type="System.Object" />
        <Parameter Name="Arg24" Type="System.Object" />
        <Parameter Name="Arg25" Type="System.Object" />
        <Parameter Name="Arg26" Type="System.Object" />
        <Parameter Name="Arg27" Type="System.Object" />
        <Parameter Name="Arg28" Type="System.Object" />
        <Parameter Name="Arg29" Type="System.Object" />
        <Parameter Name="Arg30" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Arg1">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg2">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg3">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg4">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg5">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg6">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg7">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg8">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg9">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg10">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg11">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg12">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg13">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg14">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg15">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg16">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg17">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg18">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg19">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg20">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg21">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg22">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg23">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg24">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg25">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg26">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg27">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg28">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg29">可选 <b>对象</b>。 传递给函数的参数。</param>
        <param name="Arg30">可选 <b>对象</b>。 传递给函数的参数。</param>
        <summary>在该处运行 Microsoft Excel 宏。</summary>
        <returns>To be added.</returns>
        <remarks><para>区域必须位于宏表上。</para>
          <para>此方法不可使用命名参数，参数必须通过位置进行传递。</para>
          <para><b>Run</b> 方法返回被调用的宏返回的任何值。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public object Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Select() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Select" />
      <MemberSignature Language="VB.NET" Value="Public Function Select () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Select();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(235)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>选择对象。</summary>
        <returns>To be added.</returns>
        <remarks><para>要选择单元格或单元格区域，请使用 Select 方法。 若要使单个单元格成为活动单元格，请使用 <see cref="M:Microsoft.Office.Interop.Excel.Range.Activate" /> 方法。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerActions">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Actions ServerActions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Actions ServerActions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.ServerActions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServerActions As Actions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Actions ^ ServerActions { Microsoft::Office::Interop::Excel::Actions ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2491)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2491)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Actions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定可在对象的服务器SharePoint执行的操作 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 。</summary>
        <value><see cref="T:Microsoft.Office.Interop.Excel.Actions" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPhonetic">
      <MemberSignature Language="C#" Value="public void SetPhonetic ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPhonetic() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.SetPhonetic" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetPhonetic ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetPhonetic();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1812)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为 <see cref="T:Microsoft.Office.Interop.Excel.Phonetic" /> 指定区域的所有单元格创建对象。</summary>
        <remarks><para>指定区域中的任何已有 <b>Phonetic</b> 对象都会自动被使用本方法添加的新对象覆盖（删除）。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public object Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Show() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Show" />
      <MemberSignature Language="VB.NET" Value="Public Function Show () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Show();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(496)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>滚动当前活动窗口中的内容以将指定区域移到视图中。</summary>
        <returns>To be added.</returns>
        <remarks><para>此区域必须由活动文档中的单个单元格组成。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDependents">
      <MemberSignature Language="C#" Value="public object ShowDependents (object Remove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ShowDependents([in]object Remove) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ShowDependents(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowDependents (Optional Remove As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(877)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Remove" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Remove">可选 <b>对象</b>。 <b>如果为 True，</b> 则删除指向直接从属项的一个级别的追踪箭头; <b>假</b> 以展开一个级别的跟踪箭头。 默认值为 <b>False</b>。</param>
        <summary>绘制从指定区域指向直接从属单元格的追踪箭头。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDetail">
      <MemberSignature Language="C#" Value="public object ShowDetail { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ShowDetail" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.ShowDetail" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowDetail As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ShowDetail { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(585)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(585)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(585)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>如果为指定区域扩展了边框， (返回 <b>True，</b> 以便列或行的详细信息) 。</summary>
        <value>To be added.</value>
        <remarks><para>指定区域必须为分级显示中的单个汇总列或汇总行。</para>
          <para>如果区域位于数据透视表中，则当项目显示明细数据时，此属性设置为<b>True。</b></para>
          <para>如果指定区域不在数据透视表中，则下列声明为真：</para>
          <list type="bullet">
            <item>
              <description>指定区域必须在单个汇总行或汇总列中。</description>
            </item>
            <item>
              <description>如果隐藏行或列的任何子项，则此属性返回<b>False。</b></description>
            </item>
            <item>
              <description>将此属性设置为 <b>True</b> 等效于显示汇总行或列的所有子级。</description>
            </item>
            <item>
              <description>将此属性设置为 <b>False</b> 相当于隐藏汇总行或汇总列的所有子级内容。</description>
            </item>
            <item>
              <description>如果指定区域为数据透视表，则当该区域连续时，就可以同时对多个单元格设置此属性。仅当指定区域为单个单元格时，才能返回此属性的值。</description>
            </item>
          </list>
          <para>该属性不可用于 OLAP 数据源。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowErrors">
      <MemberSignature Language="C#" Value="public object ShowErrors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ShowErrors() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ShowErrors" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowErrors () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ShowErrors();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(878)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>绘制从引用单元格树到作为错误源的单元格的追踪箭头，并返回包含该单元格的范围。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowPrecedents">
      <MemberSignature Language="C#" Value="public object ShowPrecedents (object Remove);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ShowPrecedents([in]object Remove) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.ShowPrecedents(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowPrecedents (Optional Remove As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(879)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Remove" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Remove">可选 <b>对象</b>。 <b>如果为 True，</b> 则删除指向直接引用单元格的一个级别的追踪箭头; <b>假</b> 以展开一个级别的跟踪箭头。 默认值为 <b>False</b>。</param>
        <summary>绘制从指定区域指向直接引用单元格的追踪箭头。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShrinkToFit">
      <MemberSignature Language="C#" Value="public object ShrinkToFit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ShrinkToFit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.ShrinkToFit" />
      <MemberSignature Language="VB.NET" Value="Public Property ShrinkToFit As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ShrinkToFit { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(209)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(209)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(209)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定文本是否自动缩小以适应可用列宽。</summary>
        <value>To be added.</value>
        <remarks><para>如果文本自动缩小以适应可用列宽，则此属性返回<b>True;</b>如果该属性不设置为指定区域内所有单元格的相同值，则返回<b>Null。</b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SmartTags">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.SmartTags SmartTags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.SmartTags SmartTags" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.SmartTags" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SmartTags As SmartTags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::SmartTags ^ SmartTags { Microsoft::Office::Interop::Excel::SmartTags ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2016)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2016)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.SmartTags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.SmartTags" /> 一个对象，该对象代表指定单元格的标识符。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public object Sort (object Key1, Microsoft.Office.Interop.Excel.XlSortOrder Order1 = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, object Key2, object Type, Microsoft.Office.Interop.Excel.XlSortOrder Order2 = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, object Key3, Microsoft.Office.Interop.Excel.XlSortOrder Order3 = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, Microsoft.Office.Interop.Excel.XlYesNoGuess Header = Microsoft.Office.Interop.Excel.XlYesNoGuess.xlNo, object OrderCustom, object MatchCase, Microsoft.Office.Interop.Excel.XlSortOrientation Orientation = Microsoft.Office.Interop.Excel.XlSortOrientation.xlSortRows, Microsoft.Office.Interop.Excel.XlSortMethod SortMethod = Microsoft.Office.Interop.Excel.XlSortMethod.xlPinYin, Microsoft.Office.Interop.Excel.XlSortDataOption DataOption1 = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal, Microsoft.Office.Interop.Excel.XlSortDataOption DataOption2 = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal, Microsoft.Office.Interop.Excel.XlSortDataOption DataOption3 = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Sort([in]object Key1, [in]valuetype Microsoft.Office.Interop.Excel.XlSortOrder Order1, [in]object Key2, [in]object Type, [in]valuetype Microsoft.Office.Interop.Excel.XlSortOrder Order2, [in]object Key3, [in]valuetype Microsoft.Office.Interop.Excel.XlSortOrder Order3, [in]valuetype Microsoft.Office.Interop.Excel.XlYesNoGuess Header, [in]object OrderCustom, [in]object MatchCase, [in]valuetype Microsoft.Office.Interop.Excel.XlSortOrientation Orientation, [in]valuetype Microsoft.Office.Interop.Excel.XlSortMethod SortMethod, [in]valuetype Microsoft.Office.Interop.Excel.XlSortDataOption DataOption1, [in]valuetype Microsoft.Office.Interop.Excel.XlSortDataOption DataOption2, [in]valuetype Microsoft.Office.Interop.Excel.XlSortDataOption DataOption3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Sort(System.Object,Microsoft.Office.Interop.Excel.XlSortOrder,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSortOrder,System.Object,Microsoft.Office.Interop.Excel.XlSortOrder,Microsoft.Office.Interop.Excel.XlYesNoGuess,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSortOrientation,Microsoft.Office.Interop.Excel.XlSortMethod,Microsoft.Office.Interop.Excel.XlSortDataOption,Microsoft.Office.Interop.Excel.XlSortDataOption,Microsoft.Office.Interop.Excel.XlSortDataOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function Sort (Optional Key1 As Object, Optional Order1 As XlSortOrder = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, Optional Key2 As Object, Optional Type As Object, Optional Order2 As XlSortOrder = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, Optional Key3 As Object, Optional Order3 As XlSortOrder = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, Optional Header As XlYesNoGuess = Microsoft.Office.Interop.Excel.XlYesNoGuess.xlNo, Optional OrderCustom As Object, Optional MatchCase As Object, Optional Orientation As XlSortOrientation = Microsoft.Office.Interop.Excel.XlSortOrientation.xlSortRows, Optional SortMethod As XlSortMethod = Microsoft.Office.Interop.Excel.XlSortMethod.xlPinYin, Optional DataOption1 As XlSortDataOption = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal, Optional DataOption2 As XlSortDataOption = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal, Optional DataOption3 As XlSortDataOption = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(880)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key1" Type="System.Object" />
        <Parameter Name="Order1" Type="Microsoft.Office.Interop.Excel.XlSortOrder" />
        <Parameter Name="Key2" Type="System.Object" />
        <Parameter Name="Type" Type="System.Object" />
        <Parameter Name="Order2" Type="Microsoft.Office.Interop.Excel.XlSortOrder" />
        <Parameter Name="Key3" Type="System.Object" />
        <Parameter Name="Order3" Type="Microsoft.Office.Interop.Excel.XlSortOrder" />
        <Parameter Name="Header" Type="Microsoft.Office.Interop.Excel.XlYesNoGuess" />
        <Parameter Name="OrderCustom" Type="System.Object" />
        <Parameter Name="MatchCase" Type="System.Object" />
        <Parameter Name="Orientation" Type="Microsoft.Office.Interop.Excel.XlSortOrientation" />
        <Parameter Name="SortMethod" Type="Microsoft.Office.Interop.Excel.XlSortMethod" />
        <Parameter Name="DataOption1" Type="Microsoft.Office.Interop.Excel.XlSortDataOption" />
        <Parameter Name="DataOption2" Type="Microsoft.Office.Interop.Excel.XlSortDataOption" />
        <Parameter Name="DataOption3" Type="Microsoft.Office.Interop.Excel.XlSortDataOption" />
      </Parameters>
      <Docs>
        <param name="Key1">可选 <b>对象</b>。 第一个排序字段，作为 (数据透视表字段或区域名称) 或对象 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> ("Dept"或 Cells (1，1) ，例如) 。</param>
        <param name="Order1">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrder" /> 。 中指定的字段或范围的排序顺序 <paramref name="Key1" /> 。 可以是以下 <b>XlSortOrder</b> 常量之一<b>：xlDescending</b>。 按 <paramref name="Key1" /> 降序排序。<b>xlAscending</b> <paramref name="default" /> 。 按 <paramref name="Key1" /> 升序排序。</param>
        <param name="Key2">可选 <b>对象</b>。 第二个排序字段，可以是文本（数据透视表字段或区域名）也可以是 <b>Range</b> 对象。 如果省略该参数，则没有第二个排序字段。 对数据透视表报表进行排序时不能使用。</param>
        <param name="Type">可选 <b>对象</b>。 指定要排序的元素。 仅在对数据透视表排序时才使用该参数。 可以是以下 <b>XlSortType</b> 常量之<b>一：xlSortLabels</b>。 按标签对数据透视表进行排序。<b>xlSortValues</b>。 按值对数据透视表排序。</param>
        <param name="Order2">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrder" /> 。 中指定的字段或范围的排序顺序 <paramref name="Key2" /> 。 对数据透视表进行排序时，不能使用该参数。 可以是以下 <b>XlSortOrder</b> 常量之一<b>：xlDescending</b>。 按 <paramref name="Key2" /> 降序排序。<b>xlAscending</b> <paramref name="default" /> 。 按 <paramref name="Key2" /> 升序排序。</param>
        <param name="Key3">可选 <b>对象</b>。 第三个排序字段，可以是文本（区域名）也可以是 <b>Range</b> 对象。 如果省略该参数，则没有第三个排序字段。 对数据透视表进行排序时，不能使用该参数。</param>
        <param name="Order3">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrder" /> 。 中指定的字段或范围的排序顺序 <paramref name="Key3" /> 。 对数据透视表进行排序时，不能使用该参数。 可以是以下 <b>XlSortOrder</b> 常量之一<b>：xlDescending</b>。 按 <paramref name="Key3" /> 降序排序。<b>xlAscending</b> <paramref name="default" /> 。 按 <paramref name="Key3" /> 升序排序。</param>
        <param name="Header">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlYesNoGuess" /> 。 指定第一行是否包含标题。 对数据透视表进行排序时，不能使用该参数。 可以是以下 <b>XlYesNoGuess</b> 常量之<b>一：xlGuess</b>。 让我们Microsoft Excel确定是否有标头，并确定其位置（如果有）。<b>xlNo</b> <paramref name="default" /> 。  (应按以下顺序对) 。<b>xlYes</b>。  (不应将整个区域) 。</param>
        <param name="OrderCustom">可选 <b>对象</b>。 该参数是从 1 开始的整数，指定了在自定义排序次序列表中的偏移量。 如果省略 <paramref name="OrderCustom" /> ，则使用正常排序。</param>
        <param name="MatchCase">可选 <b>对象</b>。 如果为 <b>True</b>，则进行区分大小写的排序；如果为 <b>False</b>，则排序时不区分大小写。 对数据透视表进行排序时，不能使用该参数。</param>
        <param name="Orientation">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrientation" /> 。 排序方向。 可以是以下<b>XlSortOrientation</b>常量之<b>一：xlSortRows</b> <paramref name="default" /> 。 按行排序。<b>xlSortColumns</b>。 按列排序。</param>
        <param name="SortMethod">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlSortMethod" /> 。 排序类型。 这些常量中的某些可能不可用，这取决于选择或安装的语言支持（例如，美国英语）。 可以是以下<b>XlSortMethod</b>常量之一<b>：xlStroke</b>按每个字符中的笔划数量进行排序。<b>xlPinYin</b> <paramref name="default" /> 。 按字符的汉语拼音顺序排序。</param>
        <param name="DataOption1">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlSortDataOption" /> 。 指定如何对 中的文本进行排序 <paramref name="Key 1" /> 。 对数据透视表进行排序时，不能使用该参数。 可以是以下 <b>XlSortDataOption</b> 常量之一<b>：xlSortTextAsNumbers</b>。 将文本视为排序的数字数据。<b>xlSortNormal</b> <paramref name="default" /> 。 分别对数字和文本数据进行排序。</param>
        <param name="DataOption2">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlSortDataOption" /> 。 指定如何对 中的文本进行排序 <paramref name="Key 2" /> 。 对数据透视表进行排序时，不能使用该参数。 可以是以下 <b>XlSortDataOption</b> 常量之一<b>：xlSortTextAsNumbers</b>。 将文本视为排序的数字数据。<b>xlSortNormal</b> <paramref name="default" /> 。 分别对数字和文本数据进行排序。</param>
        <param name="DataOption3">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlSortDataOption" /> 。 指定如何对键 3 中的文本进行排序。 对数据透视表进行排序时，不能使用该参数。 可以是以下 <b>XlSortDataOption</b> 常量之一<b>：xlSortTextAsNumbers</b>。 将文本视为排序的数字数据。<b>xlSortNormal</b> <paramref name="default" /> 。 分别对数字和文本数据进行排序。</param>
        <summary>如果指定区域只包含一个单元格，则对数据透视表、区域或活动区域进行排序。</summary>
        <returns>To be added.</returns>
        <remarks><para>每次使用此方法时，将保存特定工作表的 、 和 <paramref name="Header" /> <paramref name="Order1" /> <paramref name="Order2" /> <paramref name="Order3" /> <paramref name="OrderCustom" /> <paramref name="Orientation" /> 的设置。 如果在下次调用方法时不指定这些参数的值，则使用保存的值。 如果选择不使用保存的值，则每次使用 <b>Sort</b> 方法时显式设置这些参数。</para>
          <para>不能转换为数字数据的文本字符串会正常排序。</para>
          <para>如果使用 <b>Sort</b> 方法时没有定义参数，则 Microsoft Excel 会对所选定的要排序的区域按升序排序。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SortSpecial">
      <MemberSignature Language="C#" Value="public object SortSpecial (Microsoft.Office.Interop.Excel.XlSortMethod SortMethod = Microsoft.Office.Interop.Excel.XlSortMethod.xlPinYin, object Key1, Microsoft.Office.Interop.Excel.XlSortOrder Order1 = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, object Type, object Key2, Microsoft.Office.Interop.Excel.XlSortOrder Order2 = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, object Key3, Microsoft.Office.Interop.Excel.XlSortOrder Order3 = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, Microsoft.Office.Interop.Excel.XlYesNoGuess Header = Microsoft.Office.Interop.Excel.XlYesNoGuess.xlNo, object OrderCustom, object MatchCase, Microsoft.Office.Interop.Excel.XlSortOrientation Orientation = Microsoft.Office.Interop.Excel.XlSortOrientation.xlSortRows, Microsoft.Office.Interop.Excel.XlSortDataOption DataOption1 = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal, Microsoft.Office.Interop.Excel.XlSortDataOption DataOption2 = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal, Microsoft.Office.Interop.Excel.XlSortDataOption DataOption3 = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object SortSpecial([in]valuetype Microsoft.Office.Interop.Excel.XlSortMethod SortMethod, [in]object Key1, [in]valuetype Microsoft.Office.Interop.Excel.XlSortOrder Order1, [in]object Type, [in]object Key2, [in]valuetype Microsoft.Office.Interop.Excel.XlSortOrder Order2, [in]object Key3, [in]valuetype Microsoft.Office.Interop.Excel.XlSortOrder Order3, [in]valuetype Microsoft.Office.Interop.Excel.XlYesNoGuess Header, [in]object OrderCustom, [in]object MatchCase, [in]valuetype Microsoft.Office.Interop.Excel.XlSortOrientation Orientation, [in]valuetype Microsoft.Office.Interop.Excel.XlSortDataOption DataOption1, [in]valuetype Microsoft.Office.Interop.Excel.XlSortDataOption DataOption2, [in]valuetype Microsoft.Office.Interop.Excel.XlSortDataOption DataOption3) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.SortSpecial(Microsoft.Office.Interop.Excel.XlSortMethod,System.Object,Microsoft.Office.Interop.Excel.XlSortOrder,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSortOrder,System.Object,Microsoft.Office.Interop.Excel.XlSortOrder,Microsoft.Office.Interop.Excel.XlYesNoGuess,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSortOrientation,Microsoft.Office.Interop.Excel.XlSortDataOption,Microsoft.Office.Interop.Excel.XlSortDataOption,Microsoft.Office.Interop.Excel.XlSortDataOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function SortSpecial (Optional SortMethod As XlSortMethod = Microsoft.Office.Interop.Excel.XlSortMethod.xlPinYin, Optional Key1 As Object, Optional Order1 As XlSortOrder = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, Optional Type As Object, Optional Key2 As Object, Optional Order2 As XlSortOrder = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, Optional Key3 As Object, Optional Order3 As XlSortOrder = Microsoft.Office.Interop.Excel.XlSortOrder.xlAscending, Optional Header As XlYesNoGuess = Microsoft.Office.Interop.Excel.XlYesNoGuess.xlNo, Optional OrderCustom As Object, Optional MatchCase As Object, Optional Orientation As XlSortOrientation = Microsoft.Office.Interop.Excel.XlSortOrientation.xlSortRows, Optional DataOption1 As XlSortDataOption = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal, Optional DataOption2 As XlSortDataOption = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal, Optional DataOption3 As XlSortDataOption = Microsoft.Office.Interop.Excel.XlSortDataOption.xlSortNormal) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(881)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SortMethod" Type="Microsoft.Office.Interop.Excel.XlSortMethod" />
        <Parameter Name="Key1" Type="System.Object" />
        <Parameter Name="Order1" Type="Microsoft.Office.Interop.Excel.XlSortOrder" />
        <Parameter Name="Type" Type="System.Object" />
        <Parameter Name="Key2" Type="System.Object" />
        <Parameter Name="Order2" Type="Microsoft.Office.Interop.Excel.XlSortOrder" />
        <Parameter Name="Key3" Type="System.Object" />
        <Parameter Name="Order3" Type="Microsoft.Office.Interop.Excel.XlSortOrder" />
        <Parameter Name="Header" Type="Microsoft.Office.Interop.Excel.XlYesNoGuess" />
        <Parameter Name="OrderCustom" Type="System.Object" />
        <Parameter Name="MatchCase" Type="System.Object" />
        <Parameter Name="Orientation" Type="Microsoft.Office.Interop.Excel.XlSortOrientation" />
        <Parameter Name="DataOption1" Type="Microsoft.Office.Interop.Excel.XlSortDataOption" />
        <Parameter Name="DataOption2" Type="Microsoft.Office.Interop.Excel.XlSortDataOption" />
        <Parameter Name="DataOption3" Type="Microsoft.Office.Interop.Excel.XlSortDataOption" />
      </Parameters>
      <Docs>
        <param name="SortMethod">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlSortMethod" /> 。 排序类型。 这些常量中的某些可能不可用，这取决于选择或安装的语言支持（例如，美国英语）。 可以是以下 <b>XlSortMethod</b> 常量之<b>一：xlStroke</b>。 按每个字符中的笔划数量进行排序。<b>xlPinYin</b> <paramref name="default" /> 。 按字符的汉语拼音顺序排序。</param>
        <param name="Key1">可选 <b>对象</b>。 第一个排序字段，可以是文本（数据透视表字段或区域名）也可以是 <b>Range</b> 对象（例如，“Dept”或 Cells(1, 1)）。</param>
        <param name="Order1">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrder" /> 。 参数中指定的字段或范围的排序 <paramref name="Key1" /> 顺序。 可以是以下 <b>XlSortOrder</b> 常量之一<b>：xlDescending</b>。 按 <paramref name="Key1" /> 降序排序。<b>xlAscending</b> <paramref name="default" /> 。 按 <paramref name="Key1" /> 升序排序。</param>
        <param name="Type">可选 <b>对象</b>。 指定要排序的元素。 仅在对数据透视表排序时才使用该参数。</param>
        <param name="Key2">可选 <b>对象</b>。 第二个排序字段，可以是文本（数据透视表字段或区域名）也可以是 <b>Range</b> 对象。 如果省略该参数，则没有第二个排序字段。 对数据透视表进行排序时，不能使用该参数。 可以是以下 <b>XlSortType</b> 常量之<b>一：xlSortLabels</b>。 按标签对数据透视表进行排序。<b>xlSortValues</b>。 按值对数据透视表排序。</param>
        <param name="Order2">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrder" /> 。 参数中指定的字段或范围的排序 <paramref name="Key2" /> 顺序。 对数据透视表进行排序时，不能使用该参数。 可以是以下 <b>XlSortOrder</b> 常量之一<b>：xlDescending</b>。 默认 <paramref name="Key2" /> 按 <b>xlAscending 降序</b> 排序。 按 <paramref name="Key2" /> 升序排序。</param>
        <param name="Key3">可选 <b>对象</b>。 第三个排序字段，可以是文本（区域名）也可以是 <b>Range</b> 对象。 如果省略该参数，则没有第三个排序字段。 对数据透视表进行排序时，不能使用该参数。</param>
        <param name="Order3">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrder" /> 。 参数中指定的字段或范围的排序 <paramref name="Key3" /> 顺序。 对数据透视表进行排序时，不能使用该参数。 可以是以下 <b>XlSortOrder</b> 常量之一 <b>：xlDescending</b>。 按 <paramref name="Key3" /> 降序排序。<b>xlAscending</b> <paramref name="default" /> 。 按 <paramref name="Key3" /> 升序排序。</param>
        <param name="Header">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlYesNoGuess" /> 。 指定第一行是否包含标题。 对数据透视表进行排序时，不能使用该参数。 可以是以下 <b>XlYesNoGuess</b> 常量之<b>一：xlGuess</b>。 允许Microsoft Excel确定是否有标头，并确定其位置（如果有）。<b>xlNo</b> <paramref name="default" /> 。 应对整个区域进行排序。<b>xlYes</b>。 不应对整个区域进行排序。</param>
        <param name="OrderCustom">可选 <b>对象</b>。 该参数是从 1 开始的整数，指定了在自定义排序次序列表中的偏移量。 如果省略 <paramref name="OrderCustom" /> ， (使用常规) 排序顺序。</param>
        <param name="MatchCase">可选 <b>对象</b>。 如果为 <b>True</b>，则进行区分大小写的排序；如果为 <b>False</b>，则排序时不区分大小写。 对数据透视表进行排序时，不能使用该参数。</param>
        <param name="Orientation">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlSortOrientation" /> 。 排序方向。 可以是以下<b>XlSortOrientation</b>常量之<b>一：xlSortRows</b> <paramref name="default" /> 。 按行排序。<b>xlSortColumns</b>。 按列进行排序。</param>
        <param name="DataOption1">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlSortDataOption" /> 。 指定如何对 中的文本进行排序 <paramref name="Key1" /> 。 对数据透视表进行排序时，不能使用该参数。 可以是以下 <b>XlSortDataOption</b> 常量之一<b>：xlSortTextAsNumbers</b>。 将文本视为排序的数字数据。<b>xlSortNormal</b> <paramref name="default" /> 。 分别对数字和文本数据进行排序。</param>
        <param name="DataOption2">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlSortDataOption" /> 。 指定如何对 中的文本进行排序 <paramref name="Key 2" /> 。 对数据透视表进行排序时，不能使用该参数。 可以是以下 <b>XlSortDataOption</b> 常量之一<b>：xlSortTextAsNumbers</b>。 将文本视为排序的数字数据。<b>xlSortNormal</b> <paramref name="default" /> 。 分别对数字和文本数据进行排序。</param>
        <param name="DataOption3">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlSortDataOption" /> 。 指定如何对 中的文本进行排序 <paramref name="Key 3" /> 。 对数据透视表进行排序时，不能使用该参数。 可以是以下 <b>XlSortDataOption</b> 常量之一<b>：xlSortTextAsNumbers</b>。 处理排序的文本数字数据。<b>xlSortNormal</b> <paramref name="default" /> 。 分别对数字和文本数据进行排序。</param>
        <summary>使用东亚排序方法对区域或数据透视表进行排序;如果该区域仅包含一个单元格，则对活动区域使用 该方法。 例如，日文排序方法是按照假名音节表进行排序的。</summary>
        <returns>To be added.</returns>
        <remarks><para>如果没有使用<b>SortSpecial</b>方法定义任何参数，Microsoft Excel将按升序对选定内容进行排序。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="SoundNote">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.SoundNote SoundNote { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.SoundNote SoundNote" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.SoundNote" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SoundNote As SoundNote" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::SoundNote ^ SoundNote { Microsoft::Office::Interop::Excel::SoundNote ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(916)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(916)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.SoundNote</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>本属性不应再被使用。语音批注已从 Microsoft Excel 中删除。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SparklineGroups">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.SparklineGroups SparklineGroups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.SparklineGroups SparklineGroups" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.SparklineGroups" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SparklineGroups As SparklineGroups" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::SparklineGroups ^ SparklineGroups { Microsoft::Office::Interop::Excel::SparklineGroups ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2853)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2853)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.SparklineGroups</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:Microsoft.Office.Interop.Excel.SparklineGroups" /> 一个对象，该对象代表指定区域的现有迷你图组。</summary>
        <value>一 <see cref="T:Microsoft.Office.Interop.Excel.SparklineGroups" /> 个代表指定区域的现有迷你图组的对象。</value>
        <remarks><para>只读。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public void Speak (object SpeakDirection, object SpeakFormulas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Speak([in]object SpeakDirection, [in]object SpeakFormulas) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Speak(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Speak (Optional SpeakDirection As Object, Optional SpeakFormulas As Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2017)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SpeakDirection" Type="System.Object" />
        <Parameter Name="SpeakFormulas" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="SpeakDirection">可选 <b>对象</b>。 朗读的方向，按行或按列。</param>
        <param name="SpeakFormulas">可选 <b>对象</b>。 如果为 <b>True</b>，对那些有公式的单元格来说，公式将被发送到“文本到语音”(TTS) 引擎。 如果单元格没有公式，则发送值; <b>False</b> (默认值) 会导致始终将值发送到 TTS 引擎。</param>
        <summary>按行或列的顺序朗读单元格区域。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecialCells">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Range SpecialCells (Microsoft.Office.Interop.Excel.XlCellType Type, object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Office.Interop.Excel.Range SpecialCells([in]valuetype Microsoft.Office.Interop.Excel.XlCellType Type, [in]object Value) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.SpecialCells(Microsoft.Office.Interop.Excel.XlCellType,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function SpecialCells (Type As XlCellType, Optional Value As Object) As Range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(410)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Range</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlCellType" />
        <Parameter Name="Value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type">必需 <see cref="T:Microsoft.Office.Interop.Excel.XlCellType" /> 。 要包含的单元格。 可以是以下 <b>XlCellType</b> 常量之一<b>：xlCellTypeAllFormatConditions</b>。 任意格式的单元格。<b>xlCellTypeAllValidation</b>。 具有验证条件的单元格。<b>xlCellTypeBlanks</b>。 空单元格。<b>xlCellTypeComments</b>。 包含备注的单元格。<b>xlCellTypeConstants</b>。 包含常量的单元格。<b>xlCellTypeFormulas</b>。 包含公式的单元格。<b>xlCellTypeLastCell</b>。 已用区域的最后一个单元格。<b>xlCellTypeSameFormatConditions</b>。 格式相同的单元格。<b>xlCellTypeSameValidation</b>。 具有相同的验证条件的单元格。<b>xlCellTypeVisible</b>。 所有可见单元格。</param>
        <param name="Value">可选 <b>对象</b>。 如果 <paramref name="Type" /> 为 <b>xlCellTypeConstants</b> 或 <b>xlCellTypeFormulas</b>，则此参数用于确定结果中要包含的单元格类型。 将这些值相加可返回多种类型的单元格。 默认情况下，将选择所有常量或公式，无论类型如何。 可以是下列常量之一 <see cref="T:Microsoft.Office.Interop.Excel.XlSpecialCellsValue" /> <b>：xlErrors</b><b>xlLogical</b><b>xlNumbers</b><b>xlTextValues</b></param>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 一个对象，该对象代表与指定类型和值匹配的所有单元格。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public object Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Style" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Style { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(260)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(260)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(260)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Style" /> 一个对象，该对象代表指定范围的样式。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubscribeTo">
      <MemberSignature Language="C#" Value="public object SubscribeTo (string Edition, Microsoft.Office.Interop.Excel.XlSubscribeToFormat Format = Microsoft.Office.Interop.Excel.XlSubscribeToFormat.xlSubscribeToText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object SubscribeTo([in]string Edition, [in]valuetype Microsoft.Office.Interop.Excel.XlSubscribeToFormat Format) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.SubscribeTo(System.String,Microsoft.Office.Interop.Excel.XlSubscribeToFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function SubscribeTo (Edition As String, Optional Format As XlSubscribeToFormat = Microsoft.Office.Interop.Excel.XlSubscribeToFormat.xlSubscribeToText) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(481)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Edition" Type="System.String" />
        <Parameter Name="Format" Type="Microsoft.Office.Interop.Excel.XlSubscribeToFormat" />
      </Parameters>
      <Docs>
        <param name="Edition">此参数仅适用于 Macintosh 并且不应使用。</param>
        <param name="Format">此参数仅适用于 Macintosh 并且不应使用。</param>
        <summary>您请求了仅用于 Macintosh 上的关键字的帮助。 有关该关键词的帮助信息，请查阅 Microsoft Office Macintosh 版的语言参考帮助。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtotal">
      <MemberSignature Language="C#" Value="public object Subtotal (int GroupBy, Microsoft.Office.Interop.Excel.XlConsolidationFunction Function, object TotalList, object Replace, object PageBreaks, Microsoft.Office.Interop.Excel.XlSummaryRow SummaryBelowData = Microsoft.Office.Interop.Excel.XlSummaryRow.xlSummaryBelow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Subtotal([in]int32 GroupBy, [in]valuetype Microsoft.Office.Interop.Excel.XlConsolidationFunction Function, [in]object TotalList, [in]object Replace, [in]object PageBreaks, [in]valuetype Microsoft.Office.Interop.Excel.XlSummaryRow SummaryBelowData) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Subtotal(System.Int32,Microsoft.Office.Interop.Excel.XlConsolidationFunction,System.Object,System.Object,System.Object,Microsoft.Office.Interop.Excel.XlSummaryRow)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtotal (GroupBy As Integer, Function As XlConsolidationFunction, TotalList As Object, Optional Replace As Object, Optional PageBreaks As Object, Optional SummaryBelowData As XlSummaryRow = Microsoft.Office.Interop.Excel.XlSummaryRow.xlSummaryBelow) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(882)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="GroupBy" Type="System.Int32" />
        <Parameter Name="Function" Type="Microsoft.Office.Interop.Excel.XlConsolidationFunction" />
        <Parameter Name="TotalList" Type="System.Object" />
        <Parameter Name="Replace" Type="System.Object" />
        <Parameter Name="PageBreaks" Type="System.Object" />
        <Parameter Name="SummaryBelowData" Type="Microsoft.Office.Interop.Excel.XlSummaryRow" />
      </Parameters>
      <Docs>
        <param name="GroupBy">必需<b>类型，类型为 Integer。</b> 要作为分组依据的字段，为基于 1 的整数偏移量。 有关详细信息，请参阅示例。</param>
        <param name="Function">必需 <see cref="T:Microsoft.Office.Interop.Excel.XlConsolidationFunction" /> 。 小计函数。 可以是下列<b>XlConsolidationFunction</b>常量之一<b>：xlAverage</b><b>xlCount xlCountNums</b><b></b><b>xlMax</b><b>xlMin</b><b>xlProduct xlStDev</b><b>xlStDev xlStDevP</b><b>xlSum</b><b>xlUnknown</b><b>xlVar xlVarP</b><b></b> <b></b></param>
        <param name="TotalList">必需的 <b>对象</b>。 基于 1 的字段偏移量数组，它指明将被分类汇总的字段。 有关详细信息，请参阅示例。</param>
        <param name="Replace">可选 <b>对象</b>。 如果为 <b>True</b>，则替换现有分类汇总。 默认值为 <b>False</b>。</param>
        <param name="PageBreaks">可选 <b>对象</b>。 如果为 <b>True</b>，则在每一组之后添加分页符。 默认值为 <b>False</b>。</param>
        <param name="SummaryBelowData">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlSummaryRow" /> 。 相对于小计显示汇总数据。 可以是以下 <b>XlSummaryRow</b> 常量之一<b>：xlSummaryAbove</b><b>xlSummaryBelow</b><paramref name="default" /></param>
        <summary>创建指定区域或当前区域（如果该区域为单个单元格时）的分类汇总。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Summary">
      <MemberSignature Language="C#" Value="public object Summary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Summary" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Summary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Summary As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Summary { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(273)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(273)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定区域是大纲摘要行还是汇总列。</summary>
        <value>To be added.</value>
        <remarks><para>如果区域是大纲摘要行或汇总列，则此属性返回<b>True。</b></para>
          <para>该区域应为一行或一列。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public object Table (object RowInput, object ColumnInput);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Table([in]object RowInput, [in]object ColumnInput) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Table(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Table (Optional RowInput As Object, Optional ColumnInput As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(497)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RowInput" Type="System.Object" />
        <Parameter Name="ColumnInput" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RowInput">可选 <b>对象</b>。 用作数据表行输入的单个单元格。</param>
        <param name="ColumnInput">可选 <b>对象</b>。 用作数据表列输入的单个单元格。</param>
        <summary>依据输入值和工作表上定义的公式创建模拟运算表。</summary>
        <returns>To be added.</returns>
        <remarks><para>使用模拟运算表，通过更改工作表上特定常量的值，并观察其他单元格相应的变化情况，可进行模拟分析。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public object Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Text" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Text { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(138)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(138)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置指定对象中的文本。</summary>
        <value>To be added.</value>
        <remarks><para>对于 <see cref="T:Microsoft.Office.Interop.Excel.Phonetic" /> 对象，此属性返回或设置其音体文本。 不能将此属性设为 <b>Null</b>。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="TextToColumns">
      <MemberSignature Language="C#" Value="public object TextToColumns (object Destination, Microsoft.Office.Interop.Excel.XlTextParsingType DataType = Microsoft.Office.Interop.Excel.XlTextParsingType.xlDelimited, Microsoft.Office.Interop.Excel.XlTextQualifier TextQualifier = Microsoft.Office.Interop.Excel.XlTextQualifier.xlTextQualifierDoubleQuote, object ConsecutiveDelimiter, object Tab, object Semicolon, object Comma, object Space, object Other, object OtherChar, object FieldInfo, object DecimalSeparator, object ThousandsSeparator, object TrailingMinusNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object TextToColumns([in]object Destination, [in]valuetype Microsoft.Office.Interop.Excel.XlTextParsingType DataType, [in]valuetype Microsoft.Office.Interop.Excel.XlTextQualifier TextQualifier, [in]object ConsecutiveDelimiter, [in]object Tab, [in]object Semicolon, [in]object Comma, [in]object Space, [in]object Other, [in]object OtherChar, [in]object FieldInfo, [in]object DecimalSeparator, [in]object ThousandsSeparator, [in]object TrailingMinusNumbers) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.TextToColumns(System.Object,Microsoft.Office.Interop.Excel.XlTextParsingType,Microsoft.Office.Interop.Excel.XlTextQualifier,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TextToColumns (Optional Destination As Object, Optional DataType As XlTextParsingType = Microsoft.Office.Interop.Excel.XlTextParsingType.xlDelimited, Optional TextQualifier As XlTextQualifier = Microsoft.Office.Interop.Excel.XlTextQualifier.xlTextQualifierDoubleQuote, Optional ConsecutiveDelimiter As Object, Optional Tab As Object, Optional Semicolon As Object, Optional Comma As Object, Optional Space As Object, Optional Other As Object, Optional OtherChar As Object, Optional FieldInfo As Object, Optional DecimalSeparator As Object, Optional ThousandsSeparator As Object, Optional TrailingMinusNumbers As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1040)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Destination" Type="System.Object" />
        <Parameter Name="DataType" Type="Microsoft.Office.Interop.Excel.XlTextParsingType" />
        <Parameter Name="TextQualifier" Type="Microsoft.Office.Interop.Excel.XlTextQualifier" />
        <Parameter Name="ConsecutiveDelimiter" Type="System.Object" />
        <Parameter Name="Tab" Type="System.Object" />
        <Parameter Name="Semicolon" Type="System.Object" />
        <Parameter Name="Comma" Type="System.Object" />
        <Parameter Name="Space" Type="System.Object" />
        <Parameter Name="Other" Type="System.Object" />
        <Parameter Name="OtherChar" Type="System.Object" />
        <Parameter Name="FieldInfo" Type="System.Object" />
        <Parameter Name="DecimalSeparator" Type="System.Object" />
        <Parameter Name="ThousandsSeparator" Type="System.Object" />
        <Parameter Name="TrailingMinusNumbers" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Destination">可选 <b>对象</b>。 <see cref="T:Microsoft.Office.Interop.Excel.Range" />一个指定结果Microsoft Excel放置位置的对象。 如果范围大于单个单元格，则使用左上角的单元格。</param>
        <param name="DataType">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlTextParsingType" /> 。 将被拆分到多列中的文本的格式。 可以是以下<b>XlTextParsingType</b>常量之一<b>：xlDelimited </b> <paramref name="default" /> <b>xlFixedWidth</b></param>
        <param name="TextQualifier">可选 <see cref="T:Microsoft.Office.Interop.Excel.XlTextQualifier" /> 。 可以是以下<b>XlTextQualifier</b>常量之一<b>：xlTextQualifierDoubleQuote</b> <paramref name="default" /> <b>xlTextQualifierNone</b><b>xlTextQualifierSingleQuote</b></param>
        <param name="ConsecutiveDelimiter">可选 <b>对象</b>。 如果为 <b>True</b>，则 Microsoft Excel 将连续分隔符视为一个分隔符。 默认值为 <b>False</b> 。</param>
        <param name="Tab">可选 <b>对象</b>。 <b>如果</b> 为 <paramref name="DataType" /> True，为 <b>xlDelimited，</b> 并且制表符为分隔符。 默认值为 <b>False</b>。</param>
        <param name="Semicolon">可选 <b>对象</b>。 <b>如果</b> 为 <paramref name="DataType" /> True，为 <b>xlDelimited，</b> 且分号为分隔符。 默认值为 <b>False</b>。</param>
        <param name="Comma">可选 <b>对象</b>。 <b>如果</b> 为 <paramref name="DataType" /> True，为 <b>xlDelimited</b> 且逗号为分隔符。 默认值为 <b>False</b>。</param>
        <param name="Space">可选 <b>对象</b>。 <b>如果</b> 为 <paramref name="DataType" /> True，为 <b>xlDelimited，</b> 且空格字符为分隔符。 默认值为 <b>False</b>。</param>
        <param name="Other">可选 <b>对象</b>。 <b>如果</b> 为 <paramref name="DataType" /> True，则其为 <b>xlDelimited，</b> 并且将参数指定的字符 <paramref name="OtherChar" /> 作为分隔符。 默认值为 <b>False</b>。</param>
        <param name="OtherChar">如果 <b>为 True</b> <paramref name="Other" /> (，则可选 <b>Object</b>) 。 当 为 True 时， <paramref name="Other" /> 分隔符 <b>字符</b>。 如果指定了多个字符，则仅使用字符串中的第一个字符而忽略剩余字符。</param>
        <param name="FieldInfo">可选 <b>对象</b>。 包含各个数据列解析信息的数组。 解释取决于 的值 <paramref name="DataType" /> 。 分隔数据时，此参数是一个双元素数组，每个双元素数组指定特定列的转换选项。 第一个元素是基于 1 (列号) ，第二个元素是指定如何分析列的 <see cref="T:Microsoft.Office.Interop.Excel.XlColumnDataType" /> 常量之一。 可以是以下 <b>XlColumnDataType</b> 常量之<b>一：xlGeneralFormat</b>。 马来拉。 <b>xlTextFormat</b>。 文本。<b>xlMDYFormat</b>。 MDY 日期。<b>xlDMYFormat</b>。 DMY 日期。<b>xlYMDFormat</b>。 YMD 日期。<b>xlMYDFormat</b>。 MYD 日期。<b>xlDYMFormat</b>。 DYM 日期。<b>xlYDMFormat</b>。 YDM 日期。<b>xlEMDFormat</b>。 EMD 日期。<b>xlSkipColumn</b>。 Skip Column.You can use <b>xlEMDFormat</b> only if Taiwanese language support is installed and selected. <b>xlEMDFormat</b>常量指定使用中国台湾地区纪元日期。列说明符可以按任意顺序排列。 如果输入数据中的特定列不存在给定列说明器，则使用"常规"设置对列 <b>进行分析</b> 。如果源数据具有固定宽度的列，则每个双元素数组的第一个元素将列的起始字符位置指定为 (整数;0 (零) 是文本的第一个字符) 。 如上所列，双元素数组的第二个元素将列的解析选项指定为 1 到 9 之间的数字。</param>
        <param name="DecimalSeparator">可选<b>属性，类型为 String。</b> 识别数字时，Microsoft Excel 使用的小数分隔符。 默认设置为系统设置。</param>
        <param name="ThousandsSeparator">可选<b>属性，类型为 String。</b> 识别数字时，Excel 使用的千位分隔符。 默认设置为系统设置。</param>
        <param name="TrailingMinusNumbers">可选 <b>对象</b>。 以减号字符开始的数字。</param>
        <summary>将包含文本的一列单元格分解为若干列。</summary>
        <returns>To be added.</returns>
        <remarks><para>下表显示了使用不同的导入设置向 Excel 中导入文本时的结果。数字结果显示在最右边的列中。</para>
          <list type="table">
            <item>
              <term>句号</term>
              <description>逗号</description>
              <description>逗号</description>
              <description>句号</description>
              <description>123.123,45</description>
              <description>123,123.45（数字）</description>
            </item>
            <item>
              <term>句号</term>
              <description>逗号</description>
              <description>逗号</description>
              <description>逗号</description>
              <description>123.123,45</description>
              <description>123.123,45（文本）</description>
            </item>
            <item>
              <term>逗号</term>
              <description>句号</description>
              <description>逗号</description>
              <description>句号</description>
              <description>123,123.45</description>
              <description>123,123.45（数字）</description>
            </item>
            <item>
              <term>句号</term>
              <description>逗号</description>
              <description>句号</description>
              <description>逗号</description>
              <description>123 123.45</description>
              <description>123 123.45（文本）</description>
            </item>
            <item>
              <term>句号</term>
              <description>逗号</description>
              <description>句号</description>
              <description>空格</description>
              <description>123 123.45</description>
              <description>123,123.45（数字）</description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public object Top { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Top" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Top" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Top As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Top { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(126)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(126)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回从第 1 行的上边缘到区域上边缘的距离（以点表示）。</summary>
        <value>To be added.</value>
        <remarks><para>如果区域为非连续区域，则使用第一个子区域。 如果该区域有若干行，则使用区域中的顶端行（行号最小的行）。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Ungroup">
      <MemberSignature Language="C#" Value="public object Ungroup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Ungroup() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.Ungroup" />
      <MemberSignature Language="VB.NET" Value="Public Function Ungroup () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Ungroup();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(244)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在分级显示中对一个区域进行升级（即降低其分级显示的级别）。</summary>
        <returns>To be added.</returns>
        <remarks><para>指定区域必须是行或列，或者行区域或列区域。 如果指定区域在数据透视表中，本方法将对该区域内的项取消分组。</para>
          <para>如果当前单元格在父字段的字段标题中，则该字段中的所有分组将被取消，并且该字段从数据透视表中删除。当父字段中的最后一个分组被取消后，整个字段将从数据透视表中删除。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="UnMerge">
      <MemberSignature Language="C#" Value="public void UnMerge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnMerge() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.Range.UnMerge" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnMerge ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnMerge();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1384)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将合并区域分解为独立的单元格。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseStandardHeight">
      <MemberSignature Language="C#" Value="public object UseStandardHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UseStandardHeight" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.UseStandardHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property UseStandardHeight As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UseStandardHeight { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(274)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(274)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(274)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定对象的行 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 高是否等于工作表的标准高度。</summary>
        <value>To be added.</value>
        <remarks><para>如果 Range 对象的行高等于工作表的标准<b></b>高度，则此属性返回<b>True;</b>如果区域包含多个行且行的高度不相同，则返回<b>Null。</b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="UseStandardWidth">
      <MemberSignature Language="C#" Value="public object UseStandardWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UseStandardWidth" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.UseStandardWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property UseStandardWidth As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UseStandardWidth { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(275)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(275)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(275)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定对象的列宽 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> 是否等于工作表的标准宽度。</summary>
        <value>To be added.</value>
        <remarks><para>如果 Range 对象的列宽等于工作表的标准<b></b>宽度，则此属性返回<b>True;</b>如果区域包含多个列并且列的宽度不相同，则返回<b>Null。</b></para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Validation">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Validation Validation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Validation Validation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Validation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Validation As Validation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Validation ^ Validation { Microsoft::Office::Interop::Excel::Validation ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1387)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1387)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Validation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Validation" /> 表示指定区域的数据有效性的对象。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value[object RangeValueDataType] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Value(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Property Value(Optional RangeValueDataType As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value[System::Object ^] { System::Object ^ get(System::Object ^ RangeValueDataType); void set(System::Object ^ RangeValueDataType, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="RangeValueDataType" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="RangeValueDataType">可选 <b>对象</b>。 区域值数据类型。 可以是下列常量之一 <see cref="T:Microsoft.Office.Interop.Excel.XlRangeValueDataType" /> <b>：xlRangeValueDefault</b>如果指定的对象为空，则返回值 <paramref name="default" /> <see cref="T:Microsoft.Office.Interop.Excel.Range" /> <b>Empty</b> (使用<b>IsEmpty</b>函数测试这种情况) 。 如果 <b>Range</b> 对象包含多个单元格，则返回一个值数组 (<b>IsArray</b> 函数测试此情况是否) 。<b>xlRangeValueMSPersistXML</b>    以 XML 格式返回指定 <b>Range</b> 对象的记录集表示形式。<b>xlRangeValueXMLSpreadsheet</b>    以 XML 电子表格格式返回指定 <b>Range</b> 对象的值、格式、公式和名称。</param>
        <summary>返回或设置指定区域的值。</summary>
        <value>To be added.</value>
        <remarks><para>用 XML 电子表格文件中的内容设置单元格区域时，只使用工作簿中第一张工作表中的值。 您不能设置或获取 XML 电子表格格式的非连续单元格区域。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Value2">
      <MemberSignature Language="C#" Value="public object Value2 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value2" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Value2" />
      <MemberSignature Language="VB.NET" Value="Public Property Value2 As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value2 { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1388)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1388)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(1388)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置单元格值。</summary>
        <value>To be added.</value>
        <remarks><para>该属性与 <b>Value</b> 属性的唯一区别是：<b>Value2</b> 属性不使用 <b>Currency</b> 和 <b>Date</b> 数据类型。可以通过使用 <b>Double</b> 数据类型，以浮点数形式返回这些数据类型格式的数值。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignment">
      <MemberSignature Language="C#" Value="public object VerticalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object VerticalAlignment" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.VerticalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property VerticalAlignment As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ VerticalAlignment { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(137)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(137)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(137)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回或设置指定对象的垂直对齐方式。</summary>
        <value>.</value>
        <remarks><para>返回的垂直对齐说明器可以是下列可读/写 Object 值 <b>之</b> 一：</para>
          <list type="bullet">
            <item>
              <description>
                <b>xlBottom</b>
              </description>
            </item>
            <item>
              <description>
                <b>xlCenter</b>
              </description>
            </item>
            <item>
              <description>
                <b>xlDistributed</b>
              </description>
            </item>
            <item>
              <description>
                <b>xlJustify</b>
              </description>
            </item>
            <item>
              <description>
                <b>xlTop</b>
              </description>
            </item>
          </list>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public object Width { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Width" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Width" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Width As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Width { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(122)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(122)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>范围的宽度（以点表示）。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Worksheet">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Worksheet Worksheet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Worksheet Worksheet" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.Worksheet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Worksheet As Worksheet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Worksheet ^ Worksheet { Microsoft::Office::Interop::Excel::Worksheet ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(348)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(348)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Worksheet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.Worksheet" /> 一个对象，该对象表示包含指定范围的工作表。</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WrapText">
      <MemberSignature Language="C#" Value="public object WrapText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object WrapText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.WrapText" />
      <MemberSignature Language="VB.NET" Value="Public Property WrapText As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ WrapText { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(276)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(276)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(276)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定是否Microsoft Excel对象中的文本换行。</summary>
        <value>To be added.</value>
        <remarks><para>如果指定区域包含Microsoft Excel换行的单元格和其他不自动换行的单元格，则此属性返回<b>True;</b>如果指定区域包含其他不自动换行的单元格，则返回<b>Null。</b></para>
          <para>Microsoft Excel 会在必要的时候改变区域的行高以容纳其中的文字。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
    <Member MemberName="XPath">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XPath XPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.XPath XPath" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.Range.XPath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property XPath As XPath" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XPath ^ XPath { Microsoft::Office::Interop::Excel::XPath ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2258)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2258)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XPath</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回 <see cref="T:Microsoft.Office.Interop.Excel.XPath" /> 一个对象，该对象代表映射到指定对象的元素的 <see cref="T:Microsoft.Office.Interop.Excel.Range" /> Xpath。</summary>
        <value>To be added.</value>
        <remarks><para>XML 功能（以 XML 电子表格格式保存文件除外）仅在 Microsoft Office Professional Edition 2003 和 Microsoft Office Excel 2003 中可用。</para>
          <para> </para></remarks>
      </Docs>
    </Member>
  </Members>
</Type>